#!/bin/bash

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

SCRIPT_DIR=$(dirname `realpath "$0"`)

COLOR_NORM="$(printf '\033[0m')"
COLOR_BOLD="$(printf '\033[0;1m')"
COLOR_RED="$(printf '\033[0;31m')"
COLOR_BOLDRED="$(printf '\033[0;1;31m')"
COLOR_WHITE="$(printf '\033[37m')"
COLOR_BOLDWHITE="$(printf '\033[0;1;37m')"
COLOR_GREEN="$(printf '\033[32m')"
COLOR_BOLDGREEN="$(printf '\033[0;1;32m')"
COLOR_YELLOW="$(printf '\033[33m')"
COLOR_BOLDYELLOW="$(printf '\033[33m')"
COLOR_BLUE="$(printf '\033[34m')"
COLOR_BOLDBLUE="$(printf '\033[34m')"
COLOR_PINK="$(printf '\033[35m')"
COLOR_BOLDPINK="$(printf '\033[35m')"
COLOR_CYAN="$(printf '\033[36m')"
COLOR_BOLDCYAN="$(printf '\033[36m')"

WORKING_DIR=""

print_service_status()
{
  local SERVICES=$1
  if [[ -z $SERVICES ]]; then
    SERVICES=$(docker-compose ps --services)
  fi

  local output=""
  for service in $SERVICES; do
    local result=$(docker ps -a --filter name=^/${service}$ --format '{{.Names}},{{.Status}}')
    if [[ ! -z "$result" ]]; then
      local tmp_color=$COLOR_BOLDRED
      if [[ "$result" =~ "Up" ]]; then
        tmp_color=$COLOR_BOLDGREEN
      elif [[ "$result" =~ "Created" ]]; then
        tmp_color=$COLOR_BOLDYELLOW
      fi
      output="$output$(echo $result | awk -v s=$COLOR_BOLDWHITE \
        -v c=$tmp_color -v e=$COLOR_NORM -F ',' '{print s $1 ":," c $2 e}')\n"
    fi
  done

  if [[ -z "$SERVICES" ]]; then
    echo "No services are installed"
  else
    echo -e $output | column -t -s,
  fi
}

control_services()
{
  docker-compose $1 $2
}

backup ()
{
  source ./.env

  local doneStr="${COLOR_GREEN}done${COLOR_NORM}"

	if [[ ! -d $CONFIG_DIR ]]; then
		echo "No data to backup"
		return 1
	fi

	if [[ ! -d $1 ]]; then
		echo "Backup location $1 does not exist or is not a directory"
		return 1
	fi

  WORKING_DIR=$(mktemp -d)

  # replace double slashes with single so we don't need to trim
	local backupFile=$(echo "$1/$2" | sed s#//*#/#g)

	if [[ -f $backupFile ]]; then
		echo "$backupFile already exists"
		return 1
	fi

	local backupDir=$WORKING_DIR/nateflix

	echo "Stopping Nateflix"
	control_services stop
  echo

	#--------------------------------------------------------
	# BACKUP RADARR
	#--------------------------------------------------------
  if [[ -d $CONFIG_DIR/radarr ]]; then
		echo -n "saving   radarr    ... "
		mkdir -p $backupDir/radarr
		rsync -aq $CONFIG_DIR/radarr/ $backupDir/radarr \
			--exclude Backups \
			--exclude logs \
			--exclude UpdateLogs \
			--exclude nzbdrone.pid
		echo $doneStr
	fi

	#--------------------------------------------------------
	# BACKUP PLEX
	#--------------------------------------------------------
	if [[ -d "$CONFIG_DIR/plex/config/Library/Application Support/Plex Media Server" ]]; then
		echo -n "saving   plex      ... "
		mkdir -p $backupDir/plex
		rsync -aq "$CONFIG_DIR/plex/config/Library/Application Support/Plex Media Server/" $backupDir/plex \
			--exclude Cache \
			--exclude Crash\ Reports \
			--exclude Logs \
			--exclude plexmediaserver.pid
		echo $doneStr
	fi

  #--------------------------------------------------------
	# BACKUP OMBI
	#--------------------------------------------------------
	if [[ -d $CONFIG_DIR/ombi ]]; then
		echo -n "saving   ombi      ... "
		mkdir -p $backupDir/ombi
		cp $CONFIG_DIR/ombi/Ombi.db $backupDir/ombi
    cp $CONFIG_DIR/ombi/Schedules.db $backupDir/ombi
		echo $doneStr
	fi

  #--------------------------------------------------------
  # BACKUP TAUTULLI
  #--------------------------------------------------------
  if [[ -d $CONFIG_DIR/plexstats/config ]]; then
		echo -n "saving   plexstats ... "
		mkdir -p $backupDir/plexstats
    cp $CONFIG_DIR/plexstats/config/config.ini $backupDir/plexstats
    cp $CONFIG_DIR/plexstats/config/tautulli.db $backupDir/plexstats
		echo $doneStr
	fi

	#--------------------------------------------------------
	# BACKUP NZBGET
	#--------------------------------------------------------
	if [[ -d $CONFIG_DIR/nzbget/config ]]; then
		echo -n "saving   nzbget    ... "
		mkdir -p $backupDir/nzbget
		cp $CONFIG_DIR/nzbget/config/nzbget.conf $backupDir/nzbget
		echo $doneStr
	fi

	#--------------------------------------------------------
	# BACKUP SONARR
	#--------------------------------------------------------
	if [[ -d $CONFIG_DIR/sonarr ]]; then
		echo -n "saving   sonarr    ... "
		mkdir -p $backupDir/sonarr
		rsync -aq $CONFIG_DIR/sonarr/ $backupDir/sonarr \
			--exclude Backups \
			--exclude logs \
			--exclude UpdateLogs \
			--exclude nzbdrone.pid
		echo $doneStr
	fi

	#--------------------------------------------------------
	# BACKUP LIDARR
	#--------------------------------------------------------
	if [[ -d $CONFIG_DIR/lidarr ]]; then
		echo -n "saving   lidarr    ... "
		mkdir -p $backupDir/lidarr
    rsync -aq $CONFIG_DIR/lidarr/ $backupDir/lidarr \
			--exclude Backups \
			--exclude logs \
			--exclude UpdateLogs \
			--exclude lidarr.pid
		echo $doneStr
	fi

	#--------------------------------------------------------
	# BACKUP DELUGE
	#--------------------------------------------------------
	if [[ -d $CONFIG_DIR/deluge ]]; then
		echo -n "saving   deluge    ... "
		mkdir -p $backupDir/deluge
		mkdir -p $backupDir/deluge-web
		rsync -aq $CONFIG_DIR/deluge/ $backupDir/deluge \
      --exclude state \
      --exclude downloads \
      --exclude deluged.log
    rsync -aq $CONFIG_DIR/deluge-web/ $backupDir/deluge-web \
      --exclude deluge-web.log
		echo $doneStr
	fi

  #--------------------------------------------------------
	# BACKUP OPENVPN
	#--------------------------------------------------------
	if [[ -d $CONFIG_DIR/openvpn ]]; then
		echo -n "saving   openvpn   ... "
		mkdir -p $backupDir/openvpn
    cp -R $CONFIG_DIR/openvpn/* $backupDir/openvpn/
		echo $doneStr
	fi

  #--------------------------------------------------------
	# BACKUP PORTAL
	#--------------------------------------------------------
	if [[ -d $CONFIG_DIR/portal ]]; then
		echo -n "saving   portal    ... "
		mkdir -p $backupDir/portal
    cp -R $CONFIG_DIR/portal/* $backupDir/portal/
		echo $doneStr
	fi

	if [[ -d $backupDir ]]; then
    cp .env $backupDir
    echo
		echo -n "creating backup    ... "
    cd $backupDir
		tar -czf $backupFile .env * > /dev/null
    cd - > /dev/null
    echo $doneStr
	fi

	echo -n "cleaning up        ... "
	rm -rf $backupDir
  echo $doneStr
  echo

	echo "Staring Nateflix"
	control_services start

	echo

	return 0
}

restore ()
{
  source ./.env

  local doneStr="${COLOR_GREEN}done${COLOR_NORM}"

  WORKING_DIR=$(mktemp -d)
	local backupDir=$WORKING_DIR/nateflix

  mkdir -p $backupDir
  mkdir -p $CONFIG_DIR
  tar -zxvf $1 -C $backupDir > /dev/null

	echo "Stopping Nateflix"
	control_services stop
  echo

  cd $backupDir
  for dir in *; do
    if [[ -d $dir ]]; then
      printf "restoring %-10s ... " $dir
      mkdir -p $CONFIG_DIR/$dir
      cp -Rf $backupDir/$dir/* $CONFIG_DIR/$dir/
      echo $doneStr
    fi
  done
  cd - > /dev/null

  # cp -f .env $SCRIPT_DIR

	echo -n "cleaning up         ... "
	rm -rf $backupDir
  echo $doneStr
  echo

	echo "Staring Nateflix"
	control_services start

	echo

	return 0
}

upgrade ()
{
  local SERVICES=$1
  if [[ -z $SERVICES ]]; then
    SERVICES=$(docker-compose ps --services)
  fi

  for service in $SERVICES; do
    local image_name="${service}"
    case "${service}" in
    	"plex")
        image_name="plexinc/pms-docker";;
      "plexstats")
        image_name="tautulli/tautulli";;
      "portal")
        image_name="traefik";;
    esac

    docker rmi --force $image_name
    docker-compose build --no-cache $service
    docker-compose rm -svf $service
    docker-compose up -d $service
  done
}

remove ()
{
  read -ep "Remove Nateflix, config files will not be removed [n]? " yn
  case $yn in
    [Yy]* )
      ;;
    *)
      echo "Aborting installation"
      exit 1
      ;;
  esac

  source ./.env
  docker-compose down --rmi all -v --remove-orphans
  rm -rf /usr/local/sbin/nateflix > /dev/null
  rm -rf "${SCRIPT_DIR}" > /dev/null

  echo
  echo "Nateflix has been removed. Configuration data in ${CONFIG_DIR} was not removed"
  echo
}

show_help ()
{
	local me=$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")
	echo "Utility to manage a Nateflix server. Written by Nathan Martini v1.0"
	echo "usage: $me { backup <to_path> | restore <from_file> | upgrade [service] | remove [service] | status [service] | start [service] | stop [service]}"
	echo
	echo "   backup    Backup Nateflix configuration to specified path"
	echo "   restore   Restore Nateflix configuration from specified file"
	echo "   start     Start all/specific Nateflix services"
	echo "   restart   Restart all/specific Nateflix services"
	echo "   stop      Stop all/specific Nateflix services"
	echo "   status    Display status of all/specific Nateflix services"
	echo "   upgrade   Upgrade all/specific Nateflix service"
	echo "   remove    Uninstall Nateflix"
	echo "   --help    This help information"
	echo
}

cleanup ()
{
  if [[ -d $WORKING_DIR ]]; then
	   rm -rf $WORKING_DIR
  fi
}

##############################################################################
#                           MAIN STRATS HERE                                 #
##############################################################################

trap "cleanup $WORKING_DIR" EXIT

cd $SCRIPT_DIR

case "$1" in
	"backup")
		if [[ -z "$2" ]]; then
			echo >&2 "Must specify backup location"
			exit 1
		fi
		backup "$2" "nateflix-$(date +%Y%m%d-%H%M%S).tgz"
		exit $?;;

	"restore")
		if [[ -z "$2" ]]; then
			echo >&2 "Must specify backup file to restore"
			exit 1
		fi
		restore $2
		exit $?;;

	"stop")
		control_services stop $2
		exit 0;;

	"start")
		control_services start $2
		exit 0;;

  "restart")
		control_services restart $2
		exit 0;;

  "upgrade")
    upgrade_service $2
    exit 0;;

	"status")
		print_service_status $2
		exit 0;;

	"remove")
		remove
		exit 0;;

	"--help")
		show_help
		exit 1;;

	"")
		show_help
		exit 1;;

	*)
		echo >&2 "Invalid option: $1"
		echo
		exit 1;;
esac
