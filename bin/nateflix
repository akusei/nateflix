#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# TODO: huge bug with relative paths passed in as params since this is being
# cd'd into the script dir

# r|name|src_root|src|exclusions
# c|name|root|src:dest,src:dest
declare -a BACKUPS
BACKUPS=("r|portal|portal")
BACKUPS+=("r|jackett|jackett|Jackett/|log*")
BACKUPS+=("c|hydra|hydra|nzbhydra.yml,database/nzbhydra.mv.db")
BACKUPS+=("r|nzbget|nzbget||nzbget.log")
BACKUPS+=("r|plex|plex|Library/Application Support/Plex Media Server/|Cache,Crash Reports,Logs,plexmediaserver.pid")
BACKUPS+=("c|plexstats|plexstats|config.ini,tautulli.db")
BACKUPS+=("c|ombi|ombi|Ombi.db,Schedules.db")
BACKUPS+=("c|sonarr|sonarr|config.xml,nzbdrone.db")
BACKUPS+=("c|radarr|radarr|config.xml,nzbdrone.db")
BACKUPS+=("c|lidarr|lidarr|config.xml,lidarr.db")
BACKUPS+=("r|deluge|deluge||deluged.log,deluged.pid,state,icons,dht.state,session.state,ssl,hostlist.conf.1.2")
BACKUPS+=("r|vpn|vpn")
BACKUPS+=("r|pihole|pihole")

readonly COLOR_NORM="$(printf '\033[0m')"
readonly COLOR_BOLD="$(printf '\033[0;1m')"
readonly COLOR_RED="$(printf '\033[0;31m')"
readonly COLOR_BOLDRED="$(printf '\033[0;1;31m')"
readonly COLOR_WHITE="$(printf '\033[37m')"
readonly COLOR_BOLDWHITE="$(printf '\033[0;1;37m')"
readonly COLOR_GREEN="$(printf '\033[32m')"
readonly COLOR_BOLDGREEN="$(printf '\033[0;1;32m')"
readonly COLOR_YELLOW="$(printf '\033[33m')"
readonly COLOR_BOLDYELLOW="$(printf '\033[33m')"
readonly COLOR_BLUE="$(printf '\033[34m')"
readonly COLOR_BOLDBLUE="$(printf '\033[34m')"
readonly COLOR_PINK="$(printf '\033[35m')"
readonly COLOR_BOLDPINK="$(printf '\033[35m')"
readonly COLOR_CYAN="$(printf '\033[36m')"
readonly COLOR_BOLDCYAN="$(printf '\033[36m')"


get_var()
{
  declare file="$1" name="$2"

  local oldIFS=${IFS}

  while IFS='=' read -r var value; do
    if [[ ${var} == ${name} ]]; then
      IFS=${oldIFS}
      echo "${value}"
      return 0
    fi
  done < "${file}"

  IFS=${oldIFS}

  echo ""
  return 1
}

print_service_status()
{
  declare services="$@"

  local oldDir="${PWD}"
  cd "${SCRIPT_DIR}"

  if [[ ${#services} == 0 ]]; then
    services="$(docker-compose ps --services)"
    if [[ ${#services} == 0 ]]; then
      echo "No services are installed"
      exit 1
    fi
  fi

  local output=""
  for service in ${services}; do
    local result=$(docker ps -a --filter name="^/${service}$" --format '{{.Names}},{{.Status}}')
    if [[ ! -z ${result} ]]; then
      local tmp_color=${COLOR_BOLDRED}
      if [[ "$result" =~ "Up" ]]; then
        tmp_color=${COLOR_BOLDGREEN}
      elif [[ "$result" =~ "Created" ]]; then
        tmp_color=${COLOR_BOLDYELLOW}
      fi
      output="${output}$(echo ${result} | awk -v s=${COLOR_BOLDWHITE} \
        -v c=${tmp_color} -v e=${COLOR_NORM} -F ',' '{print s $1 ":," c $2 e}')\n"
    fi
  done

  cd "${oldDir}"

  echo -e ${output} | column -t -s,
}

control_services()
{
  declare action="$1" services="${@:2}"

  local oldDir="${PWD}"
  cd "${SCRIPT_DIR}"

  if [[ $action == "restart" ]]; then
    docker-compose stop ${services}
    action="start"
  fi

  docker-compose "${action}" ${services}

  cd "${oldDir}"
}

backup()
{
  declare backup_dir="$1" backup_file="$2"

  local config_dir=$(get_var "${SCRIPT_DIR}/.env" "CONFIG_DIR")
  local doneStr="${COLOR_GREEN}done${COLOR_NORM}"

  if [[ ! -d ${config_dir} ]]; then
    echo "No data to backup"
    return 1
  fi

  if [[ ! -d ${backup_dir} ]]; then
    echo "Backup location ${backup_dir} does not exist or is not a directory"
    return 1
  fi

  local backupFile="$(realpath "${backup_dir}")/${backup_file}"
  WORKING_DIR=$(mktemp -d)

  # # replace double slashes with single so we don't need to trim
  # local backupFile=$(echo "${backup_dir}/${backup_file}" | sed s#//*#/#g)

  if [[ -f ${backupFile} ]]; then
    echo "${backupFile} already exists"
    return 1
  fi

  local backupDir="${WORKING_DIR}/nateflix"

  echo "Stopping Nateflix"
  control_services stop
  echo

  local longest=0
  for i in "${!BACKUPS[@]}"; do
    local title=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 2)
    if [[ ${#title} > ${longest} ]]; then
      longest=${#title}
    fi
  done

  longest=$((longest+2))

  for i in "${!BACKUPS[@]}"; do
    local type=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 1)
    local title=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 2)
    local root=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 3)

    printf "saving   %-${longest}s ... " ${title}

    mkdir -p "${backupDir}/${root}"

    local oldIFS=${IFS}
    IFS=','

    if [[ ${type} == 'r' ]]; then
      local src=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 4)
      local exclude=($(echo "${BACKUPS[${i}]}" | cut -d '|' -f 5))
      rsync -aq "${config_dir}/${root}/${src}" "${backupDir}/${root}" "${exclude[@]/#/--exclude=}"
    else
      local items=($(echo "${BACKUPS[${i}]}" | cut -d '|' -f 4))
      for i in "${!items[@]}"; do
        local src=$(echo "${items[${i}]}" | cut -d ':' -f 1)
        local dest=$(echo "${items[${i}]}" | cut -d ':' -f 2)
        mkdir -p "$(dirname "${backupDir}/${root}/${dest}")"
        cp "${config_dir}/${root}/${src}" "${backupDir}/${root}/${dest}"
      done
    fi
    echo ${doneStr}
  done

  IFS=${oldIFS}

  if [[ -d ${backupDir} ]]; then
    cp .env "${backupDir}"
    cp "${SCRIPT_DIR}/docker-compose.yml" "${backupDir}"
    if [[ -f ${SCRIPT_DIR}/docker-compose.override.yml ]]; then
      cp "${SCRIPT_DIR}/docker-compose.override.yml" "${backupDir}"
    fi
    echo
    echo -n "creating backup      ... "
    cd "${backupDir}"
    tar -czf "${backupFile}" .env * > /dev/null
    cd - > /dev/null
    echo ${doneStr}
  fi

  echo -n "cleaning up          ... "
  rm -rf "${backupDir}"
  echo ${doneStr}
  echo

  echo "Staring Nateflix"
  control_services start

  echo

  return 0
}

restore()
{
  declare backup_file="$1"

  # TODO: take destination dir as argument
  # TODO: add flag for overwriting .env

  local config_dir=$(get_var "${SCRIPT_DIR}/.env" "CONFIG_DIR")
  local doneStr="${COLOR_GREEN}done${COLOR_NORM}"

  WORKING_DIR=$(mktemp -d)
  local backupDir="${WORKING_DIR}/nateflix"

  mkdir -p "${backupDir}"
  mkdir -p "${config_dir}"
  tar -zxf "${backup_file}" -C "${backupDir}" > /dev/null

  echo "Stopping Nateflix"
  control_services stop
  echo

  local longest=0
  for i in "${!BACKUPS[@]}"; do
    local title=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 2)
    if [[ ${#title} > ${longest} ]]; then
      longest=${#title}
    fi
  done

  longest=$((longest+2))

  for i in "${!BACKUPS[@]}"; do
    local type=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 1)
    local title=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 2)
    local root=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 3)

    printf "restore  %-${longest}s ... " ${title}

    mkdir -p "${config_dir}/${root}"

    local oldIFS=${IFS}
    IFS=','

    if [[ ${type} == 'r' ]]; then
      local src=$(echo "${BACKUPS[${i}]}" | cut -d '|' -f 4)
      local exclude=($(echo "${BACKUPS[${i}]}" | cut -d '|' -f 5))
      mkdir -p "${config_dir}/${root}/${src}"
      rsync -aq "${backupDir}/${root}/" "${config_dir}/${root}/${src}"
    else
      local items=($(echo "${BACKUPS[${i}]}" | cut -d '|' -f 4))
      for i in "${!items[@]}"; do
        local src=$(echo "${items[${i}]}" | cut -d ':' -f 1)
        local dest=$(echo "${items[${i}]}" | cut -d ':' -f 2)
        mkdir -p "$(dirname "${config_dir}/${root}/${src}")"
        cp "${backupDir}/${root}/${dest}" "${config_dir}/${root}/${src}"
      done
    fi
    echo ${doneStr}
  done

  IFS=${oldIFS}

  if [[ -f ${backupDir}/docker-compose.override.yml ]]; then
    cp "${backupDir}/docker-compose.override.yml" "${SCRIPT_DIR}"
  fi
  # cp -f .env $SCRIPT_DIR

  echo -n "cleaning up           ... "
  rm -rf "${backupDir}"
  echo ${doneStr}
  echo

  echo "Staring Nateflix"
  control_services start

  echo

  return 0
}

update_service()
{
  declare services="$@"

  local oldDir="${PWD}"
  cd "${SCRIPT_DIR}"

  if [[ ${#services} == 0 ]]; then
    services=$(docker-compose ps --services)
  fi

  for service in ${services}; do
    local data=$(docker-compose images ${service} | tail -n +3)
    local image_name="$(echo ${data} | tr -s ' ' '\t' | cut -f 2)"
    image_name="${image_name}:$(echo ${data} | tr -s ' ' '\t' | cut -f 3)"

    docker pull ${image_name}
  done

  docker-compose stop ${services}
  docker-compose rm -svf ${services}
  docker-compose up -d ${services}

  cd "${oldDir}"
}

remove()
{
  declare force="$1"

  local msg="Remove Nateflix, config files will not be removed [n]?"
  if [[ ${force} == "--nuke" ]]; then
    msg="Remove Nateflix, config files WILL BE REMOVED!! [n]?"
  fi

  read -ep "${msg} " yn
  case $yn in
    [Yy]*)
      ;;
    *)
      echo "Aborting..."
      exit 1;;
  esac

  cd "${SCRIPT_DIR}"

  local config_dir=$(get_var "./.env" "CONFIG_DIR")
  local oldDir="${PWD}"

  docker-compose down --rmi all -v --remove-orphans
  rm -rf /usr/local/sbin/nateflix > /dev/null
  rm -rf "${SCRIPT_DIR}" > /dev/null
  rm -rf /usr/local/bin/ctop > /dev/null

  echo
  if [[ ${force} == "--nuke" ]]; then
    rm -rf "${config_dir}"
    echo "Nateflix has been removed. ALL CONFIG DATA HAS ALSO BEEN REMOVED!!"
  else
    echo "Nateflix has been removed. Configuration data in ${config_dir} was not removed"
  fi
  echo
}

ctop_command()
{
  if [[ ! -f /usr/local/bin/ctop ]]; then
    echo "ctop is missing"
    local version=$(curl --silent "https://api.github.com/repos/bcicen/ctop/releases/latest" | grep -ioe '"tag_name": "[^"]*' | cut -c 14-)
    curl --silent -o /usr/local/bin/ctop -L "https://github.com/bcicen/ctop/releases/download/${version}/ctop-${version#"v"}-linux-amd64"
    chmod a+x /usr/local/bin/ctop
  fi

  ctop "$@"
}

show_urls()
{
  local oldDir="${PWD}"
  cd "${SCRIPT_DIR}"

  local domain=$(get_var "./.env" "DOMAIN")
  local names=()
  names+=("Portal:portal")
  names+=("NZBGet:newz")
  names+=("Deluge:torrents")
  names+=("Plex:watch")
  names+=("Plex Stats:stats")
  names+=("OMBI:request")
  names+=("PiHole:pihole")
  names+=("Jackett:jackett")
  names+=("Sonarr:shows")
  names+=("Radarr:movies")
  names+=("Lidarr:music")
  names+=("Hydra:hydra")

  local content=""
  for service in "${names[@]}"; do
    local display_name=$(echo "${service}" | cut -d ':' -f 1)
    local hostname=$(echo "${service}" | cut -d ':' -f 2)
    content="${content}${display_name},https://${hostname}.${domain}|"
  done

  echo "${content//|/$'\n'}" | column -s ',' -t
  echo

  cd "${oldDir}"
}

show_help()
{
	local me="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
	echo "Utility to manage a Nateflix server. Written by Nathan Martini v1.0"
	echo "usage: $me { backup <to_path> | restore <from_file> | upgrade [service] | remove [--nuke] | status [service] | start [service] | stop [service]}"
	echo
	echo "   backup    Backup Nateflix configuration to specified path"
	echo "   restore   Restore Nateflix configuration from specified file"
	echo "   start     Start all/specific Nateflix services"
	echo "   restart   Restart all/specific Nateflix services"
	echo "   stop      Stop all/specific Nateflix services"
	echo "   status    Display status of all/specific Nateflix services"
  echo "   upgrade   Upgrade all/specific Nateflix service"
  echo "   top       show top-like nateflix status"
  echo "   urls      show all available service URLs"
  echo "   remove    Uninstall Nateflix"
	echo "   --help    This help information"
	echo
}

cleanup ()
{
  declare working="$1"
  if [[ -d ${working} ]]; then
	   rm -rf "${working}"
  fi
}

##############################################################################
#                           MAIN STARTS HERE                                 #
##############################################################################

if [[ ${EUID} != 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

WORKING_DIR=""
readonly SCRIPT_DIR="$(readlink -f "$(dirname "$(realpath "$0")")/../")"
trap "cleanup \"\${WORKING_DIR}\"" EXIT


case "${1:-}" in
	"backup")
		if [[ -z $2 ]]; then
			echo >&2 "Must specify backup location"
			exit 1
		fi
		backup "$2" "nateflix-$(date +%Y%m%d-%H%M%S).tgz"
		exit $?;;

	"restore")
		if [[ -z $2 ]]; then
			echo >&2 "Must specify backup file to restore"
			exit 1
		fi
		restore "$2"
		exit $?;;

	"stop"|"start"|"restart")
		control_services "${1}" "${@:2}"
		exit 0;;

  "update")
    update_service "${@:2}"
    exit 0;;

	"status")
		print_service_status "${@:2}"
		exit 0;;

	"remove")
		remove "${2:-}"
    exit 0;;

  "urls")
    show_urls
    exit 0;;

  "top")
    shift
    ctop_command "$@"
    exit 0;;

	"--help")
		show_help
		exit 1;;

	"")
		show_help
		exit 1;;

	*)
		echo >&2 "Invalid option: $1"
		echo
		exit 1;;
esac
