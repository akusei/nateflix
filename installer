#!/usr/bin/env bash

# TODO: deluge not working (can't connect?)
# TODO: torrent web site is asking for password? password not known
# TODO: make installer do an update if already installed
# TODO: might need to check for /dev/dri and remove it from compose if not found
#        people having issues with permission on that dir (add plex to video group?)
# TODO: preferencesmanager:517 geoip_db_location: /usr/share/GeoIP/GeoIP.dat in deluge

set -o errexit
set -o nounset
set -o pipefail


LOG_FILE=/tmp/nateflix-$(date +%Y%m%d%H%M%S).log


check_ports()
{
  local ports="80 443 6789 32400 3005 8324 32469 1900 32410 32412 32413 32414 8181 5000 8989 7878 8686 8112 58846"
  local used=''
  local openPorts=$(lsof -Pi -n | grep -v "[-][>]" | grep -v "COMMAND")

  for port in $ports; do
    local result=$(grep ":${port} " <<< "${openPorts}" | tail -n 1)
    if [[ ! -z $result ]]; then
      used="${used},$(echo ${result}|cut -d ' ' -f 1):${port}"
    fi
  done

  if [[ -n ${used} ]]; then
    used=$(echo $used | cut -d ',' -f 2-)
    echo "Required ports are already in use (${used})"
    echo "These ports are required, please stop any services associated with these ports"
    exit 1
  fi
}

log()
{
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  echo "${timestamp} [${1}] ${2}" >> "${LOG_FILE}"
  if [[ ${3:-} == 1 ]]; then
    echo "${2}"
  fi
}

get_var()
{
  source $2
  echo ${!1}
}

version_compare()
{
  # return 0 $1 == $2
  # return 1 $1 > $2
  # return 2 $1 < $2

  if [[ $1 == $2 ]]; then
    return 0
  fi

  local IFS=.
  local i ver1=($1) ver2=($2)

  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
    ver1[i]=0
  done

  for ((i=0; i<${#ver1[@]}; i++)); do
    if [[ -z ${ver2[i]} ]]; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi

    if ((10#${ver1[i]} > 10#${ver2[i]})); then
      return 1
    fi

    if ((10#${ver1[i]} < 10#${ver2[i]})); then
      return 2
    fi
  done

  return 0
}

check_distro()
{
  export DISTRO=$(get_var ID /etc/os-release)
  export VERSION=$(get_var VERSION_ID /etc/os-release)

  if [[ -z $DISTRO ]]; then
    echo "Unable to determine linux distro"
    exit 1
  fi

  if [[ $(uname -m) != "x86_64" ]]; then
  	echo "This architecture is not supported ($(uname -m))"
  	exit 1
  fi

  local debVersion="7.7"
  local ubuVersion="14.04"
  local cenVersion="7"
  local fedVersion="26"

  if [[ "$DISTRO" == "debian" && $(version_compare $VERSION "${debVersion}"; echo $?) == 2 ]]; then
    echo "Requires Debian ${debVersion} or higher"
    exit 1
  elif [[ "$DISTRO" == "ubuntu" && $(version_compare $VERSION "${ubuVersion}"; echo $?) == 2 ]]; then
    echo "Requires Ubuntu ${ubuVersion} or higher"
    exit 1
  elif [[ "$DISTRO" == "centos" && $(version_compare $VERSION "${cenVersion}"; echo $?) == 2 ]]; then
    echo "Requires CentOS ${cenVersion} or higher"
    exit 1
  elif [[ "$DISTRO" == "fedora" && $(version_compare $VERSION "${fedVersion}"; echo $?) == 2 ]]; then
    echo "Requires Fedora ${fedVersion} or higher"
    exit 1
  fi

  export PACKAGE_UPDATE='apt-get -qq update'
  export PACKAGE_INSTALL='apt-get -qq -y install'

  if [[ "${DISTRO}" == "centos" ]]; then
    PACKAGE_UPDATE=''
    PACKAGE_INSTALL='yum install -y'
  elif [[ "${DISTRO}" == "fedora" ]]; then
    PACKAGE_UPDATE=''
    PACKAGE_INSTALL='dnf -y install'
  fi
}

cleanup()
{
  if [[ -d $1 ]]; then
    rm -rf $1
  fi
}

check_if_running()
{
  local http_status='0'
  local http_content=''
  local retries=${4:-20}
  local out=''

  # while [[ $http_status != "$2" || $http_content != *"$3"* ]]; do
  while [[ ${http_status} != ${2} || ! ${http_content} =~ ${3} ]]; do
    out=$(curl -k --silent -L -w "\n%{http_code}" "$1" || true)
    http_status="${out##*$'\n'}"
    http_content="${out%$'\n'*}"
    retries=$((${retries}-1))
    if [[ ${retries} < 0 ]]; then
      echo "Service did not properly start"
      exit 1
    fi
    sleep 1
  done

  return 0
}

extract()
{
  local archive=$(awk '/^__ARCHIVE__/ {print NR + 1; exit 0; }' "${0}")
  tail -n+${archive} "${0}" | tar xpJv -C $1 >> "${LOG_FILE}" 2>&1
}

get_value()
{
    read -ep "$1 [$2]? " value
    if [[ ! -z "$value" ]]; then
      echo $value
    else
      echo $2
    fi
}

check_prereqs()
{
  local reqDockerVersion="18.06.0"
  local reqDCVersion="1.23.1"

  if [[ $(hash docker 2>/dev/null; echo $?) != 0 ]]; then
    echo "docker is not installed"
    echo "please install the latest version of docker"
    echo "https://docs.docker.com/install/linux/docker-ce/${DISTRO}/"
    exit 1
  fi

  if [[ $(hash docker-compose 2>/dev/null; echo $?) != 0 ]]; then
    echo "docker-compose is not installed"
    echo "please install the latest version of docker compose"
    echo "https://docs.docker.com/compose/install/"
    exit 1
  fi

  local dockerVersion=$(docker --version|cut -d ' ' -f 3|cut -d ',' -f 1)
  local dcVersion=$(docker-compose --version|cut -d ' ' -f 3|cut -d ',' -f 1)
  if [[ $(version_compare $dockerVersion "${reqDockerVersion}"; echo $?) == 2 ]]; then
    echo "Your docker version (${dockerVersion}) is not supported"
    echo "Version >= ${reqDockerVersion} is required"
    echo "Please update your docker https://docs.docker.com/install/linux/docker-ce/${DISTRO}/"
    exit 1
  fi

  if [[ $(version_compare $dcVersion "${reqDCVersion}"; echo $?) == 2 ]]; then
    echo "Your docker-compose version (${dcVersion}) is not supported"
    echo "Version >= ${reqDCVersion} is required"
    echo "Please update your docker-compose https://docs.docker.com/compose/install/"
    exit 1
  fi

  systemctl start docker
}

install_dependencies()
{
  echo "Installing dependencies..."
  ${PACKAGE_UPDATE}
  ${PACKAGE_INSTALL} rsync sqlite3 curl openssl >> "${LOG_FILE}" 2>&1
}

gather_required_config()
{
  echo
  echo
  echo "**************************"
  echo "* INITIAL CONFIGURATION  *"
  echo "**************************"
  echo

  export CONFIG_DIR=/nateflix
  export PLEX_HOSTNAME=Nateflix

  log "INFO" "Gathering credentials..."
  while [[ -z ${PLEX_USERNAME:-} || -z ${PLEX_PASSWORD:-} && -z ${PLEX_TOKEN:-} ]]; do
    read -ep "Plex username: " PLEX_USERNAME
    read -esp "Plex password: " PLEX_PASSWORD
    echo

    if [[ -z ${PLEX_USERNAME} || -z ${PLEX_PASSWORD} ]]; then
      echo "Plex username and password required"
    elif [[ -n ${PLEX_USERNAME} && -n ${PLEX_PASSWORD} ]]; then
      local result=$(curl -s --header "X-Plex-Client-Identifier: Nateflix" \
              --header "X-Plex-Product: Nateflix Installation" \
              --header "X-Plex-Version: V1" \
              -d "user[login]=${PLEX_USERNAME}&user[password]=${PLEX_PASSWORD}" \
              -X POST https://plex.tv/users/sign_in.json)
      local re="^\{\"error\":\"(.+)\"\}$"
      if [[ $result =~ $re ]]; then
        log "ERROR" "Login failed: ${BASH_REMATCH[1]}" 1
        PLEX_USERNAME=''
        PLEX_PASSWORD=''
      elif [[ $result != *"{\"user\":"* ]]; then
        echo $result >> "${LOG_FILE}"
        log "ERROR" "Login failed: Unexpected result, try again (check ${LOG_FILE} for details)" 1
        PLEX_USERNAME=''
        PLEX_PASSWORD=''
      else
        PLEX_TOKEN=$(echo $result | grep -ioe '"authToken":"[^"]*' | cut -c 14-)
        if [[ -z ${PLEX_TOKEN} ]]; then
          echo "Unable to parse plex login token"
          exit 1
        fi
      fi
    fi
  done

  export PLEX_USERNAME
  export PLEX_PASSWORD
  export PLEX_TOKEN

  echo
  echo "Set credentials for web access to system portal"
  while [[ -z ${PORTAL_USERNAME:-} ]]; do
    read -ep "Portal Username: " PORTAL_USERNAME
    if [[ -z ${PORTAL_USERNAME} ]]; then
      echo "Portal username is required"
    else
      PORTAL_PASSWORD=$(openssl passwd -apr1 -quiet 2>/dev/null || true)
      while [[ -z ${PORTAL_PASSWORD} ]]; do
        PORTAL_PASSWORD=$(openssl passwd -apr1 -quiet 2>/dev/null || true)
      done
    fi
  done

  export PORTAL_CREDS="${PORTAL_USERNAME}:${PORTAL_PASSWORD}"

  echo
  echo "Set credentials for Private Internet Access VPN"
  while [[ -z ${VPN_USERNAME:-} || -z ${VPN_PASSWORD:-} ]]; do
    read -ep "PIA VPN Username: " VPN_USERNAME
    read -esp "PIA VPN Password: " VPN_PASSWORD
    echo
    if [[ -z ${VPN_USERNAME} || -z ${VPN_PASSWORD} ]]; then
      echo "VPN username and password are required"
    fi
  done

  export VPN_USERNAME
  export VPN_PASSWORD
  export VPN_REGION="US West"

  echo

  export DOMAIN=$(get_value "Nateflix domain name" $(hostname))
  export INSTALL_DIR=$(get_value "Install directory" "/opt/nateflix")
  export MEDIA_ROOT=$(get_value "Root location of media library" "/mnt/media")
}

install()
{
  echo
  echo
  echo "**************************"
  echo "*  INSTALLING NATEFLIX   *"
  echo "**************************"
  echo

  log "INFO" "Extracting files" 1
  extract "${WORKING_DIR}"

  log "INFO" "Creating directories" 1
  mkdir -p "${INSTALL_DIR}"
  mkdir -p "${MEDIA_ROOT}"
  mkdir -p "${CONFIG_DIR}/portal"

  local configFile=.env

  log "INFO" "Copying files" 1
  cp -Rv "${WORKING_DIR}/." "${INSTALL_DIR}" >> "${LOG_FILE}" 2>&1
  touch "${INSTALL_DIR}/${configFile}"

  if [[ -e /usr/local/sbin/nateflix ]]; then
    rm /usr/local/sbin/nateflix
  fi
  ln -s "${INSTALL_DIR}/bin/nateflix" "/usr/local/sbin/nateflix"

  cd "${INSTALL_DIR}"

  echo "Setting CONFIG_DIR to ${CONFIG_DIR}" >> "${LOG_FILE}"
  echo CONFIG_DIR=${CONFIG_DIR} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting MEDIA_ROOT to ${MEDIA_ROOT}" >> "${LOG_FILE}"
  echo MEDIA_ROOT=${MEDIA_ROOT} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting INSTALL_DIR to ${INSTALL_DIR}" >> "${LOG_FILE}"
  echo INSTALL_DIR=${INSTALL_DIR} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting DOMAIN to ${DOMAIN}" >> "${LOG_FILE}"
  echo DOMAIN=${DOMAIN} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting VPN_REGION to ${VPN_REGION}" >> "${LOG_FILE}"
  echo VPN_REGION=${VPN_REGION} >> "${INSTALL_DIR}/${configFile}"
}

configure_lidarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING LIDARR   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Lidarr"
  local dbFile="${CONFIG_DIR}/lidarr/lidarr.db"
  if [[ -f "${dbFile}" ]]; then
    log "INFO" "Lidarr already configured; skipping..." 1
    return
  fi

  docker-compose up -d lidarr
  check_if_running 'http://localhost:8686' 200 'Lidarr' 30
  docker-compose stop lidarr

  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('autounmonitorpreviouslydownloadedtracks', 'True')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('deleteemptyfolders', 'True')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('copyusinghardlinks', 'False')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1,'nzbget','Nzbget','{\"host\":\"nzbget\",\"port\":6789,\"username\":\"\",\"password\":\"\",\"musicCategory\":\"Music\",\"recentTvPriority\":0,\"olderTvPriority\":0,\"addPaused\":false,\"useSsl\":false}','NzbgetSettings')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1,'deluge','Deluge','{\"host\":\"deluge\",\"port\":8112,\"username\":\"\",\"password\":\"\",\"musicCategory\":\"lidarr\",\"recentTvPriority\":0,\"olderTvPriority\":0,\"addPaused\":false,\"useSsl\":false}','DelugeSettings')"
  sqlite3 "${dbFile}" "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename,OnAlbumDownload) values ('plex',0,1,'{\"host\":\"plex\",\"port\":32400,\"username\":\"${PLEX_USERNAME}\",\"password\":\"${PLEX_PASSWORD}\",\"updateLibrary\":true,\"useSsl\":false,\"isValid\":true}','PlexServer','PlexServerSettings',1,'[]',1,1)"
  sed -i -e "s/<\/Config>/<LaunchBrowser>False<\/LaunchBrowser>\n<\/Config>/" "${CONFIG_DIR}/lidarr/config.xml"
  sed -i -e "s/<\/Config>/<AnalyticsEnabled>False<\/AnalyticsEnabled>\n<\/Config>/" "${CONFIG_DIR}/lidarr/config.xml"
}

configure_plex()
{
  echo
  echo
  echo "**************************"
  echo "*    CONFIGURING PLEX    *"
  echo "**************************"
  echo

  log "INFO" "Configuring Plex"
  if [[ -f "${CONFIG_DIR}/plex/config/Library/Application Support/Plex Media Server/Preferences.xml" ]]; then
    log "INFO" "Plex already configured; skipping..." 1
    return
  fi

  log "INFO" "Getting Plex claim token" 1
  local result=$(curl -s --header "X-Plex-Client-Identifier: Nateflix" \
          --header "X-Plex-Product: Nateflix Installation" \
          --header "X-Plex-Token: ${PLEX_TOKEN}" \
          -X GET https://plex.tv/api/claim/token.json)

  export PLEX_CLAIM=$(echo ${result} | grep -ioe '"token":"[^"]*' | cut -c 10-)
  if [[ -z ${PLEX_CLAIM} ]]; then
    echo "Error retrieving Plex Claim Token"
    echo ${result} >> "${LOG_FILE}"
    exit 1;
  fi

  docker-compose up -d plex
  check_if_running 'http://localhost:32400/web/index.html' 200 "Plex" 500
  docker-compose stop plex
}

configure_nzbget()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING NZBGET   *"
  echo "**************************"
  echo

  log "INFO" "Configuring NzbGet"
  local configFile="${CONFIG_DIR}/nzbget/config/nzbget.conf"
  if [[ -f "${configFile}" ]]; then
    log "INFO" "NzbGet already configured; skipping..." 1
    return
  fi

  docker-compose up -d nzbget
  check_if_running 'http://localhost:6789' 401 '' 10
  docker-compose stop nzbget

  sed -i -e "s/^\(ControlUsername\).\+$/\1=/g" "${configFile}"
  sed -i -e "s/^\(ControlPassword\).\+$/\1=/g" "${configFile}"
}

make_api_call()
{
  curl -Ls -H 'Content-Type: application/json' \
       -H "ApiKey: $1" \
       -d "$3" "http://localhost:5000/api/v1/$2"
}

configure_ombi()
{
  echo
  echo
  echo "**************************"
  echo "*    CONFIGURING OMBI    *"
  echo "**************************"
  echo

  log "INFO" "Configuring OMBI"
  if [[ -f "${CONFIG_DIR}/ombi/Ombi.db" ]]; then
    log "INFO" "OMBI already configured; skipping..." 1
    return
  fi

  docker-compose up -d ombi
  check_if_running 'http://localhost:5000' 200 'Ombi'

  local apiKey=$(grep -aioe '"ApiKey":"[^"]*' "${CONFIG_DIR}/ombi/Ombi.db" | cut -c 11-)
  local sonarrKey=$(cat "${CONFIG_DIR}/sonarr/config.xml" | grep -aioe "<ApiKey>[^<]*" | cut -c 9-)
  local radarrKey=$(cat "${CONFIG_DIR}/radarr/config.xml" | grep -aioe "<ApiKey>[^<]*" | cut -c 9-)

  make_api_call "${apiKey}" "Issues/categories" '{"value":"Shows"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Foreign Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Anime Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Anime Shows"}'

  make_api_call "${apiKey}" "Settings/customization" "{\"applicationName\":\"Nateflix\",\"applicationUrl\":\"https://request.${DOMAIN}\"}"
  make_api_call "${apiKey}" "Settings/Issues" '{"enabled":true,"enableInProgress":true}'
  make_api_call "${apiKey}" "Settings/authentication" '{"allowNoPassword":false,"enableOAuth":true}'

  local data=$(cat <<- EOD
  {"enabled": true,
  "apiKey": "${sonarrKey}",
  "qualityProfile": "6",
  "seasonFolders": true,
  "qualityProfileAnime": "6",
  "addOnly": false,
  "ssl": false,
  "ip": "sonarr",
  "port": 8989}
EOD
)
  make_api_call "${apiKey}" "Settings/sonarr" "${data}"

  data=$(cat <<- EOD
  {"enabled": true,
  "apiKey": "${radarrKey}",
  "defaultQualityProfile": "6",
  "addOnly": false,
  "minimumAvailability": "Released",
  "ssl": false,
  "ip": "radarr",
  "port": 7878}
EOD
)
  make_api_call "${apiKey}" "Settings/radarr" "${data}"

#   data=$(cat <<- EOD
#   {
#     "enable": true,
#     "installId": "string",
#     "servers": [
#       {
#         "name": "Nateflix",
#         "episodeBatchSize": 0,
#         "ssl": true,
#         "ip": "plex",
#         "port": 32400
#       }
#     ]
#   }
# EOD
# )

#   data=$(cat <<- EOD
#   {
#     "enable": true,
#     "servers": [
#       {
#         "name": "Nateflix",
#         "plexSelectedLibraries": [
#           {
#             "enabled": true
#           }
#         ],
#         "ssl": true,
#         "ip": "plex",
#         "port": 32400
#       }
#     ]
#   }
# EOD
# )
#   make_api_call "${apiKey}" "Settings/plex" "${data}"

  docker-compose stop ombi
}

configure_sonarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING SONARR   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Sonarr"
  local dbFile="${CONFIG_DIR}/sonarr/nzbdrone.db"
  if [[ -f "${dbFile}" ]]; then
    log "INFO" "Sonarr already configured; skipping..." 1
    return
  fi

  docker-compose up -d sonarr
  check_if_running 'http://localhost:8989' 200 'Sonarr'
  docker-compose stop sonarr

  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('cleanupmetadataimages', 'False')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'nzbget', 'Nzbget', '{\"host\": \"nzbget\", \"port\": 6789, \"username\": \"\", \"password\": \"\", \"tvCategory\": \"Series\", \"recentTvPriority\": 0, \"olderTvPriority\": 0, \"useSsl\": false}', 'NzbgetSettings')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'deluge', 'Deluge', '{\"host\": \"deluge\", \"port\": 8112, \"password\": \"\", \"tvCategory\": \"tv-sonarr\", \"recentTvPriority\": 0, \"addPaused\": false, \"olderTvPriority\": 0, \"useSsl\": false}', 'DelugeSettings')"
  sqlite3 "${dbFile}" "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename) values ('pms', 0, 1, '{\"host\": \"plex\", \"port\": 32400, \"username\": \"${PLEX_USERNAME}\", \"password\": \"${PLEX_PASSWORD}\", \"updateLibrary\": true, \"useSsl\": false, \"isValid\": true}', 'PlexServer', 'PlexServerSettings', 1, '[]', 1)"
  sqlite3 "${dbFile}" "insert into NamingConfig (MultiEpisodeStyle,RenameEpisodes,StandardEpisodeFormat,DailyEpisodeFormat,SeasonFolderFormat,SeriesFolderFormat,AnimeEpisodeFormat,ReplaceIllegalCharacters) values (0,1,'{Series Title} - S{season:00}E{episode:00} - {Episode Title} {Quality Full}','{Series Title} - {Air-Date} - {Episode Title} {Quality Full}','Season {season}','{Series Title}','{Series Title} - S{season:00}E{episode:00} - {Episode Title} {Quality Full}',1)"
  sed -i -e "s/<LaunchBrowser>True<\/LaunchBrowser>/<LaunchBrowser>False<\/LaunchBrowser>/" "${CONFIG_DIR}/sonarr/config.xml"
  sed -i -e "s/<\/Config>/<AnalyticsEnabled>False<\/AnalyticsEnabled>\n<\/Config>/" "${CONFIG_DIR}/sonarr/config.xml"
}

configure_radarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING RADARR   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Radarr"
  local dbFile="${CONFIG_DIR}/radarr/nzbdrone.db"
  if [[ -f "${dbFile}" ]]; then
    log "INFO" "Radarr already configured; skipping..." 1
    return
  fi

  docker-compose up -d radarr
  check_if_running 'http://localhost:7878' 200 'Radarr'
  docker-compose stop radarr

  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('cleanupmetadataimages', 'False')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'nzbget', 'Nzbget', '{\"host\": \"nzbget\", \"port\": 6789, \"username\": \"\", \"password\": \"\", \"tvCategory\": \"Series\", \"recentTvPriority\": 0, \"olderTvPriority\": 0, \"useSsl\": false}', 'NzbgetSettings')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'deluge', 'Deluge', '{\"host\": \"deluge\", \"port\": 8112, \"password\": \"\", \"tvCategory\": \"radarr\", \"recentTvPriority\": 0, \"addPaused\": false, \"olderTvPriority\": 0, \"useSsl\": false}', 'DelugeSettings')"
  sqlite3 "${dbFile}" "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename) values ('pms', 0, 1, '{\"host\": \"plex\", \"port\": 32400, \"username\": \"${PLEX_USERNAME}\", \"password\": \"${PLEX_PASSWORD}\", \"updateLibrary\": true, \"useSsl\": false, \"isValid\": true}', 'PlexServer', 'PlexServerSettings', 1, '[]', 1)"
  sqlite3 "${dbFile}" "insert into NamingConfig (MultiEpisodeStyle,RenameEpisodes,ReplaceIllegalCharacters,StandardMovieFormat,MovieFolderFormat,ColonReplacementFormat) values (0,1,1,'{Movie Title} {Release Year} {Quality Title}','{Movie Title} ({Release Year})',1)"
  sed -i -e "s/<LaunchBrowser>True<\/LaunchBrowser>/<LaunchBrowser>False<\/LaunchBrowser>/" "${CONFIG_DIR}/radarr/config.xml"
  sed -i -e "s/<\/Config>/<AnalyticsEnabled>False<\/AnalyticsEnabled>\n<\/Config>/" "${CONFIG_DIR}/radarr/config.xml"
}

configure_plexstats()
{
  echo
  echo
  echo "**************************"
  echo "* CONFIGURING PLEX STATS *"
  echo "**************************"
  echo

  log "INFO" "Configuring Plex Stats"
  local configFile="${CONFIG_DIR}/plexstats/config.ini"
  if [[ -f "${configFile}" ]]; then
    log "INFO" "Plex Stats already configured; skipping..." 1
    return
  fi

  docker-compose up -d plexstats
  check_if_running 'http://localhost:8181' 200 'Tautulli - Welcome' 500
  docker-compose stop plexstats

  sed -i -e "s/^\(pms_url\) =.\+$/\1 = http:\/\/plex:32400/g" "${configFile}"
  sed -i -e "s/^\(pms_name\) =.\+$/\1 = ${PLEX_HOSTNAME}/g" "${configFile}"
  sed -i -e "s/^\(pms_plexpass\) =.\+$/\1 = 1/g" "${configFile}"
  sed -i -e "s/^\(pms_port\) =.\+$/\1 = 32400/g" "${configFile}"
  sed -i -e "s/^\(pms_platform\) =.\+$/\1 = Linux/g" "${configFile}"
  sed -i -e "s/^\(pms_ip\) =.\+$/\1 = plex/g" "${configFile}"
  sed -i -e "s/^\(launch_browser\) =.\+$/\1 = 0/g" "${configFile}"
  sed -i -e "s/^\(show_advanced_settings\) =.\+$/\1 = 1/g" "${configFile}"
  sed -i -e "s/^\(pms_logs_folder\) =.\+$/\1 = \/logs/g" "${configFile}"
}

configure_deluge()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING DELUGE   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Deluge"
  if [[ -f "${CONFIG_DIR}/deluge/core.conf" && -f  "${CONFIG_DIR}/deluge-web/web.conf" ]]; then
    log "INFO" "Deluge already configured; skipping..." 1
    return
  fi

  docker-compose up -d deluge
  check_if_running 'http://localhost:8112' 200 'Deluge'
  while [[ ! -f "${CONFIG_DIR}/deluge/auth" ]]; do
    sleep 1s
  done
  docker-compose stop deluge

  echo ${VPN_USERNAME} > "${CONFIG_DIR}/openvpn/auth.txt"
  echo ${VPN_PASSWORD} >> "${CONFIG_DIR}/openvpn/auth.txt"
  echo "::10" > "${CONFIG_DIR}/deluge/auth"

  sed -i -e "s/^\(.\+\"pwd_sha1\": \"\)[a-f0-9]\{40\}\(.\+\)$/\\1\\2/g" "${CONFIG_DIR}/deluge-web/web.conf"
  sed -i -e "s/^\(.\+\"pwd_salt\": \"\)[a-f0-9]\{40\}\(.\+\)$/\\1\\2/g" "${CONFIG_DIR}/deluge-web/web.conf"
}

configure_portal()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING PORTAL   *"
  echo "**************************"
  echo

  echo "Copying configuration..."
  cp "${INSTALL_DIR}/portal/config.toml" "${CONFIG_DIR}/portal"
  echo "Creating users..."
  echo ${PORTAL_CREDS} > "${CONFIG_DIR}/portal/users"
}

build_and_configure()
{
  echo
  echo
  echo "**************************"
  echo "*    BUILDING IMAGES     *"
  echo "**************************"
  echo

  export PLEX_CLAIM=""
  docker-compose build --no-cache >> "${LOG_FILE}"
  if [[ $? > 0 ]]; then
    echo "Error building images check log file ${LOG_FILE} for details"
    exit $?
  fi

  configure_portal
  configure_plex
  configure_nzbget
  configure_lidarr
  configure_sonarr
  configure_radarr
  configure_ombi
  configure_plexstats
  configure_deluge
}


if [[ ${EUID} != 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

WORKING_DIR=$(mktemp -d)
trap "cleanup \"${WORKING_DIR}\"" EXIT


# Check for required packages, distros and ports, exit if missing requirements
check_ports
check_distro
check_prereqs

# Install smaller dependencies
install_dependencies

# Gather information from user and perform install
gather_required_config
install

# Build images and configure programs
build_and_configure


echo
echo
echo "Installation complete"
echo
echo

docker-compose up -d

echo
echo "You may need to perform some extra setup steps in each application"
echo "The following domains might also need to be added to your hosts file"
echo
echo "NZBGet:     http://newz.${DOMAIN}"
echo "Plex:       http://watch.${DOMAIN}"
echo "Plex Stats: http://stats.${DOMAIN}"
echo "Lidarr:     http://music.${DOMAIN}"
echo "Sonarr:     http://shows.${DOMAIN}"
echo "Radarr:     http://movies.${DOMAIN}"
echo "OMBI:       http://request.${DOMAIN}"
echo "Deluge:     http://torrents.${DOMAIN}"
echo "Portal:     http://portal.${DOMAIN}"
echo

exit $?

__ARCHIVE__
