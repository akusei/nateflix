#!/bin/bash

# TODO: make installer do an update if already installed

LOG_FILE=/tmp/nateflix-$(date +%Y%m%d%H%M%S).log

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

if [[ -z "$(which curl)" ]]; then
  echo "Curl is required for this script to run properly"
  exit 1
fi

get_var()
{
  source $2
  echo ${!1}
}

version_compare()
{
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

DISTRO=$(get_var ID /etc/os-release)
VERSION=$(get_var VERSION_ID /etc/os-release)

if [[ -z $DISTRO || $(uname -p) != "x86_64" ]]; then
	echo "This distro/architecture is not supported"
	exit 1
fi

if [[ "$DISTRO" == "debian" && $(version_compare $VERSION "7.6"; echo $?) != 1 ]]; then
  echo "Requires Debian 7.7 or higher"
  exit 1
elif [[ "$DISTRO" == "ubuntu" && $(version_compare $VERSION "14.03"; echo $?) != 1 ]]; then
  echo "Requires Ubuntu 14.04 or higher"
  exit 1
elif [[ "$DISTRO" == "centos" && $(version_compare $VERSION "6"; echo $?) != 1 ]]; then
  echo "Requires CentOS 7 or higher"
  exit 1
elif [[ "$DISTRO" == "fedora" && $(version_compare $VERSION "25"; echo $?) != 1 ]]; then
  echo "Requires Fedora 26 or higher"
  exit 1
fi

WORKING_DIR=$(mktemp -d)

cleanup()
{
  if [[ -d $1 ]]; then
    rm -rf $1
  fi
}

trap "cleanup $WORKING_DIR" EXIT

check_if_running()
{
  local http_status='0'
  local http_content=''
  local retries=${4:-20}
  local out=''

  # while [[ $http_status != "$2" || $http_content != *"$3"* ]]; do
  while [[ $http_status != "$2" || ! "${http_content}" =~ "${3}" ]]; do
    out=$(curl -k --silent -L -w "\n%{http_code}" "$1")
    http_status="${out##*$'\n'}"
    http_content="${out%$'\n'*}"
    retries=$(($retries-1))
    if [[ $retries -lt 0 ]]; then
      echo "Service did not properly start"
      exit 1
    fi
    sleep 1
  done

  return 0
}

extract()
{
  local archive=$(awk '/^__ARCHIVE__/ {print NR + 1; exit 0; }' "${0}")
  tail -n+${archive} "${0}" | tar xpJv -C $1 >> $LOG_FILE
}

get_value()
{
    read -ep "$1 [$2]? " value
    if [[ ! -z "$value" ]]; then
      echo $value
    else
      echo $2
    fi
}

gather_required_config()
{
  echo
  echo
  echo "**************************"
  echo "* INITIAL CONFIGURATION  *"
  echo "**************************"
  echo

  CONFIG_DIR=/nateflix
  export CONFIG_DIR
  PLEX_HOSTNAME=Nateflix
  export PLEX_HOSTNAME

  read -ep "Plex username: " PLEX_USERNAME
  read -esp "Plex password: " PLEX_PASSWORD
  echo
  export PLEX_USERNAME
  export PLEX_PASSWORD
  if [[ -z "${PLEX_USERNAME}" || -z "${PLEX_PASSWORD}" ]]; then
    echo "Plex username and password required"
    exit 1;
  fi

  local result=$(curl -s --header "X-Plex-Client-Identifier: Nateflix" \
          --header "X-Plex-Product: Nateflix Installation" \
          --header "X-Plex-Version: V1" \
          -d "user[login]=${PLEX_USERNAME}&user[password]=${PLEX_PASSWORD}" \
          -X POST https://plex.tv/users/sign_in.json)
  local re="^\{\"error\":\"(.+)\"\}$"
  if [[ $result =~ $re ]]; then
    echo "Login failed: ${BASH_REMATCH[1]}"
    exit 1
  fi
  if [[ $result != *"{\"user\":"* ]]; then
    echo "Login failed: Unexpected result"
    exit 1
  fi

  PLEX_TOKEN=$(echo $result | grep -ioe '"authToken":"[^"]*' | cut -c 14-)
  export PLEX_TOKEN
  PLEX_CLAIM="not a real token"
  export PLEX_CLAIM

  echo "PORTAL CREDENTIALS"
  read -ep "Portal Username: " PORTAL_USERNAME
  PORTAL_PASSWORD=$(openssl passwd -apr1)
  while [[ "$?" != "0" ]]; do
    PORTAL_PASSWORD=$(openssl passwd -apr1)
  done
  #PORTAL_PASSWORD=$(echo "${PORTAL_PASSWORD}"|sed -e s/\\$/\\$\\$/g)
  export PORTAL_CREDS="${PORTAL_USERNAME}:${PORTAL_PASSWORD}"

  read -ep "PIA VPN Username: " VPN_USERNAME
  read -esp "PIA VPN Password: " VPN_PASSWORD
  echo
  export VPN_USERNAME
  export VPN_PASSWORD
  if [[ -z "${VPN_USERNAME}" || -z "${VPN_PASSWORD}" ]]; then
    echo "VPN username and password are required"
    exit 1;
  fi

  echo

  DOMAIN=nateflix.io
  # DOMAIN=$(get_value "Nateflix domain name" $DOMAIN)
  export DOMAIN

  ADVERTISE_IP=192.168.1.147
  ADVERTISE_IP=$(get_value "IP address of this server" $ADVERTISE_IP)
  export ADVERTISE_IP

  INSTALL_DIR="/opt/nateflix"
  # INSTALL_DIR=$(get_value "Where do you want to install Nateflix" $INSTALL_DIR)
  # if [[ -d $INSTALL_DIR ]]; then
  #   read -ep "Directory already exists, overwrite [n]? " yn
  #   case $yn in
  #     [Yy]* )
  #       #rm -rf $INSTALL_DIR
  #       ;;
  #     *)
  #       echo "Aborting installation"
  #       exit 1
  #       ;;
  #   esac
  # fi
  # if [[ $(mkdir -p $INSTALL_DIR > /dev/null 2>&1; echo $?) == 0 ]]; then
  #   rm -rf $INSTALL_DIR
  # else
  #   echo "Could not create destination directory"
  #   exit 1
  # fi
  export INSTALL_DIR

  MEDIA_ROOT=/mnt/media
  MEDIA_ROOT=$(get_value "Root location of media library" $MEDIA_ROOT)
  export MEDIA_ROOT

  TZ=$(date +%Z)
  export TZ
}

install_docker()
{
  echo
  echo
  echo "**************************"
  echo "*   INSTALLING DOCKER    *"
  echo "**************************"
  echo

  echo Installing Docker
  if [[ "$DISTRO" == "debian" ]]; then
    apt-get remove docker docker-engine docker.io
    apt-get update -qq
    apt-get install -qq -y apt-transport-https ca-certificates curl gnupg2 software-properties-common sqlite3 rsync
    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
    add-apt-repository --remove "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    apt-get update -qq
    apt-get upgrade -qq -y docker-ce
    systemctl start docker
  elif [[ "$DISTRO" == "ubuntu" ]]; then
    apt-get remove docker docker-engine docker.io
    apt-get update -qq
    apt-get install -qq -y apt-transport-https ca-certificates curl gnupg2 software-properties-common sqlite3 rsync
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    add-apt-repository --remove "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
    apt-get update -qq
    apt-get upgrade -qq -y docker-ce
    systemctl start docker
  elif [[ "$DISTRO" == "centos" ]]; then
    yum remove docker docker-client docker-client-latest docker-common docker-latest \
               docker-latest-logrotate docker-logrotate docker-selinux \
               docker-engine-selinux docker-engine docker-ce
    yum update
    yum install -y yum-utils device-mapper-persistent-data lvm2 sqlite3 rsync
    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    yum install docker-ce
    systemctl start docker
  elif [[ "$DISTRO" == "fedora" ]]; then
    dnf remove docker docker-client docker-client-latest docker-common docker-latest \
               docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux \
               docker-engine docker-ce
    dnf update
    dnf -y install dnf-plugins-core
    dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
    dnf install docker-ce sqlite3 rsync
    systemctl start docker
  fi

  echo Installing/Updating Docker-Compose
  # Docker compose
  if [[ ! -z "$(which docker-compose)" ]]; then
    rm -rf "$(which docker-compose)"
  fi

  url=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url | grep Linux-x86_64[^.] | cut -d '"' -f 4)
  curl -L $url -o /usr/local/bin/docker-compose
  chmod +x /usr/local/bin/docker-compose
}

install()
{
  gather_required_config
  install_docker

  echo
  echo
  echo "**************************"
  echo "*  INSTALLING NATEFLIX   *"
  echo "**************************"
  echo

  echo "Extracting files"
  extract $WORKING_DIR

  echo "Creating directories"
  mkdir -p $INSTALL_DIR
  mkdir -p $MEDIA_ROOT
  mkdir -p $CONFIG_DIR/portal

  echo "Copying files"
  cp -Rv $WORKING_DIR/. $INSTALL_DIR >> $LOG_FILE
  touch $INSTALL_DIR/.env

  cp $INSTALL_DIR/portal/config.toml $CONFIG_DIR/portal
  echo ${PORTAL_CREDS} > $CONFIG_DIR/portal/users

  if [[ -e /usr/local/sbin/nateflix ]]; then
    rm /usr/local/sbin/nateflix
  fi
  ln -s $INSTALL_DIR/nateflix /usr/local/sbin/nateflix

  cd $INSTALL_DIR
  build_and_configure

  echo "Setting TZ to ${TZ}" >> $LOG_FILE
  echo TZ=$TZ >> $INSTALL_DIR/.env
  echo "Setting CONFIG_DIR to ${CONFIG_DIR}" >> $LOG_FILE
  echo CONFIG_DIR=$CONFIG_DIR >> $INSTALL_DIR/.env
  echo "Setting MEDIA_ROOT to ${MEDIA_ROOT}" >> $LOG_FILE
  echo MEDIA_ROOT=$MEDIA_ROOT >> $INSTALL_DIR/.env
  echo "Setting PLEX_CLAIM to ${PLEX_CLAIM}" >> $LOG_FILE
  echo PLEX_CLAIM=$PLEX_CLAIM >> $INSTALL_DIR/.env
  echo "Setting DOMAIN to ${DOMAIN}" >> $LOG_FILE
  echo DOMAIN=$DOMAIN >> $INSTALL_DIR/.env
  echo "Setting ADVERTISE_IP to ${ADVERTISE_IP}" >> $LOG_FILE
  echo ADVERTISE_IP=$ADVERTISE_IP >> $INSTALL_DIR/.env
  echo "Setting PLEX_HOSTNAME to ${PLEX_HOSTNAME}" >> $LOG_FILE
  echo PLEX_HOSTNAME=$PLEX_HOSTNAME >> $INSTALL_DIR/.env

  echo
  echo
  echo "Installation complete"
  echo
  echo

  docker-compose up -d
}

configure_lidarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING LIDARR   *"
  echo "**************************"
  echo

  local dbFile=$CONFIG_DIR/lidarr/lidarr.db
  if [[ -f $dbFile ]]; then
    echo "Lidarr already configured; skipping..."
    return
  fi

  docker-compose up -d lidarr
  check_if_running 'http://localhost:8686' 200 'Lidarr' 30
  docker-compose stop lidarr

  sqlite3 $dbFile "insert into Config (Key,Value) values ('autounmonitorpreviouslydownloadedtracks', 'True')"
  sqlite3 $dbFile "insert into Config (Key,Value) values ('deleteemptyfolders', 'True')"
  sqlite3 $dbFile "insert into Config (Key,Value) values ('copyusinghardlinks', 'False')"
  sqlite3 $dbFile "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 $dbFile "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1,'nzbget','Nzbget','{\"host\":\"nzbget\",\"port\":6789,\"username\":\"\",\"password\":\"\",\"musicCategory\":\"Music\",\"recentTvPriority\":0,\"olderTvPriority\":0,\"addPaused\":false,\"useSsl\":false}','NzbgetSettings')"
  sqlite3 $dbFile "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1,'deluge','Deluge','{\"host\":\"deluge\",\"port\":8112,\"username\":\"\",\"password\":\"\",\"musicCategory\":\"lidarr\",\"recentTvPriority\":0,\"olderTvPriority\":0,\"addPaused\":false,\"useSsl\":false}','DelugeSettings')"
  sqlite3 $dbFile "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename,OnAlbumDownload) values ('plex',0,1,'{\"host\":\"plex\",\"port\":32400,\"username\":\"${PLEX_USERNAME}\",\"password\":\"${PLEX_PASSWORD}\",\"updateLibrary\":true,\"useSsl\":false,\"isValid\":true}','PlexServer','PlexServerSettings',1,'[]',1,1)"
  sed -i -e "s/<\/Config>/<LaunchBrowser>False<\/LaunchBrowser>\n<\/Config>/" $CONFIG_DIR/lidarr/config.xml
  sed -i -e "s/<\/Config>/<AnalyticsEnabled>False<\/AnalyticsEnabled>\n<\/Config>/" $CONFIG_DIR/lidarr/config.xml
}

configure_plex()
{
  echo
  echo
  echo "**************************"
  echo "*    CONFIGURING PLEX    *"
  echo "**************************"
  echo

  if [[ -f "${CONFIG_DIR}/plex/config/Library/Application Support/Plex Media Server/Preferences.xml" ]]; then
    echo "Plex already configured; skipping..."
    return
  fi

  echo "Getting Plex claim token"
  local result=$(curl -s --header "X-Plex-Client-Identifier: Nateflix" \
          --header "X-Plex-Product: Nateflix Installation" \
          --header "X-Plex-Token: ${PLEX_TOKEN}" \
          -X GET https://plex.tv/api/claim/token.json)

  PLEX_CLAIM=$(echo $result | grep -ioe '"token":"[^"]*' | cut -c 10-)
  export PLEX_CLAIM
  if [[ -z $PLEX_CLAIM ]]; then
    echo "Error retrieving Plex Claim Token"
    exit 1;
  fi

  docker-compose up -d plex
  check_if_running 'http://localhost:32400/web/index.html' 200 "Plex" 500
  docker-compose stop plex
}

configure_nzbget()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING NZBGET   *"
  echo "**************************"
  echo

  local configFile=$CONFIG_DIR/nzbget/config/nzbget.conf
  if [[ -f $configFile ]]; then
    echo "NzbGet already configured; skipping..."
    return
  fi

  docker-compose up -d nzbget
  check_if_running 'http://localhost:6789' 401 '' 10
  docker-compose stop nzbget

  sed -i -e "s/^\(ControlUsername\).\+$/\1=/g" $configFile
  sed -i -e "s/^\(ControlPassword\).\+$/\1=/g" $configFile
}

make_api_call()
{
  curl -Ls -H 'Content-Type: application/json' \
       -H "ApiKey: $1" \
       -d "$3" "http://localhost:5000/api/v1/$2"
}

configure_ombi()
{
  echo
  echo
  echo "**************************"
  echo "*    CONFIGURING OMBI    *"
  echo "**************************"
  echo

  if [[ -f ${CONFIG_DIR}/ombi/Ombi.db ]]; then
    echo "OMBI already configured; skipping..."
    return
  fi

  docker-compose up -d ombi
  check_if_running 'http://localhost:5000' 200 'Ombi'

  local apiKey=$(grep -aioe '"ApiKey":"[^"]*' ${CONFIG_DIR}/ombi/Ombi.db | cut -c 11-)
  local sonarrKey=$(cat ${CONFIG_DIR}/sonarr/config.xml | grep -aioe "<ApiKey>[^<]*" | cut -c 9-)
  local radarrKey=$(cat ${CONFIG_DIR}/radarr/config.xml | grep -aioe "<ApiKey>[^<]*" | cut -c 9-)

  make_api_call "${apiKey}" "Issues/categories" '{"value":"Shows"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Foreign Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Anime Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Anime Shows"}'

  make_api_call "${apiKey}" "Settings/customization" '{"applicationName":"Nateflix","applicationUrl":"https://request.nateflix.io"}'
  make_api_call "${apiKey}" "Settings/Issues" '{"enabled":true,"enableInProgress":true}'
  make_api_call "${apiKey}" "Settings/authentication" '{"allowNoPassword":false,"enableOAuth":true}'

  local data=$(cat <<- EOD
  {"enabled": true,
  "apiKey": "${sonarrKey}",
  "qualityProfile": "6",
  "seasonFolders": true,
  "qualityProfileAnime": "6",
  "addOnly": false,
  "ssl": false,
  "ip": "sonarr",
  "port": 8989}
EOD
)
  make_api_call "${apiKey}" "Settings/sonarr" "${data}"

  data=$(cat <<- EOD
  {"enabled": true,
  "apiKey": "${radarrKey}",
  "defaultQualityProfile": "6",
  "addOnly": false,
  "minimumAvailability": "Released",
  "ssl": false,
  "ip": "radarr",
  "port": 7878}
EOD
)
  make_api_call "${apiKey}" "Settings/radarr" "${data}"

#   data=$(cat <<- EOD
#   {
#     "enable": true,
#     "installId": "string",
#     "servers": [
#       {
#         "name": "Nateflix",
#         "episodeBatchSize": 0,
#         "ssl": true,
#         "ip": "plex",
#         "port": 32400
#       }
#     ]
#   }
# EOD
# )

#   data=$(cat <<- EOD
#   {
#     "enable": true,
#     "servers": [
#       {
#         "name": "Nateflix",
#         "plexSelectedLibraries": [
#           {
#             "enabled": true
#           }
#         ],
#         "ssl": true,
#         "ip": "plex",
#         "port": 32400
#       }
#     ]
#   }
# EOD
# )
#   make_api_call "${apiKey}" "Settings/plex" "${data}"

  docker-compose stop ombi
}

configure_sonarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING SONARR   *"
  echo "**************************"
  echo

  local dbFile=$CONFIG_DIR/sonarr/nzbdrone.db
  if [[ -f $dbFile ]]; then
    echo "Sonarr already configured; skipping..."
    return
  fi

  docker-compose up -d sonarr
  check_if_running 'http://localhost:8989' 200 'Sonarr'
  docker-compose stop sonarr

  sqlite3 $dbFile "insert into Config (Key,Value) values ('cleanupmetadataimages', 'False')"
  sqlite3 $dbFile "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 $dbFile "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'nzbget', 'Nzbget', '{\"host\": \"nzbget\", \"port\": 6789, \"username\": \"\", \"password\": \"\", \"tvCategory\": \"Series\", \"recentTvPriority\": 0, \"olderTvPriority\": 0, \"useSsl\": false}', 'NzbgetSettings')"
  sqlite3 $dbFile "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'deluge', 'Deluge', '{\"host\": \"deluge\", \"port\": 8112, \"password\": \"\", \"tvCategory\": \"tv-sonarr\", \"recentTvPriority\": 0, \"addPaused\": false, \"olderTvPriority\": 0, \"useSsl\": false}', 'DelugeSettings')"
  sqlite3 $dbFile "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename) values ('pms', 0, 1, '{\"host\": \"plex\", \"port\": 32400, \"username\": \"${PLEX_USERNAME}\", \"password\": \"${PLEX_PASSWORD}\", \"updateLibrary\": true, \"useSsl\": false, \"isValid\": true}', 'PlexServer', 'PlexServerSettings', 1, '[]', 1)"
  sqlite3 $dbFile "insert into NamingConfig (MultiEpisodeStyle,RenameEpisodes,StandardEpisodeFormat,DailyEpisodeFormat,SeasonFolderFormat,SeriesFolderFormat,AnimeEpisodeFormat,ReplaceIllegalCharacters) values (0,1,'{Series Title} - S{season:00}E{episode:00} - {Episode Title} {Quality Full}','{Series Title} - {Air-Date} - {Episode Title} {Quality Full}','Season {season}','{Series Title}','{Series Title} - S{season:00}E{episode:00} - {Episode Title} {Quality Full}',1)"
  sed -i -e "s/<LaunchBrowser>True<\/LaunchBrowser>/<LaunchBrowser>False<\/LaunchBrowser>/" $CONFIG_DIR/sonarr/config.xml
  sed -i -e "s/<\/Config>/<AnalyticsEnabled>False<\/AnalyticsEnabled>\n<\/Config>/" $CONFIG_DIR/sonarr/config.xml
}

configure_radarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING RADARR   *"
  echo "**************************"
  echo

  local dbFile=$CONFIG_DIR/radarr/nzbdrone.db
  if [[ -f $dbFile ]]; then
    echo "Radarr already configured; skipping..."
    return
  fi

  docker-compose up -d radarr
  check_if_running 'http://localhost:7878' 200 'Radarr'
  docker-compose stop radarr

  sqlite3 $dbFile "insert into Config (Key,Value) values ('cleanupmetadataimages', 'False')"
  sqlite3 $dbFile "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 $dbFile "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'nzbget', 'Nzbget', '{\"host\": \"nzbget\", \"port\": 6789, \"username\": \"\", \"password\": \"\", \"tvCategory\": \"Series\", \"recentTvPriority\": 0, \"olderTvPriority\": 0, \"useSsl\": false}', 'NzbgetSettings')"
  sqlite3 $dbFile "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'deluge', 'Deluge', '{\"host\": \"deluge\", \"port\": 8112, \"password\": \"\", \"tvCategory\": \"radarr\", \"recentTvPriority\": 0, \"addPaused\": false, \"olderTvPriority\": 0, \"useSsl\": false}', 'DelugeSettings')"
  sqlite3 $dbFile "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename) values ('pms', 0, 1, '{\"host\": \"plex\", \"port\": 32400, \"username\": \"${PLEX_USERNAME}\", \"password\": \"${PLEX_PASSWORD}\", \"updateLibrary\": true, \"useSsl\": false, \"isValid\": true}', 'PlexServer', 'PlexServerSettings', 1, '[]', 1)"
  sqlite3 $dbFile "insert into NamingConfig (MultiEpisodeStyle,RenameEpisodes,ReplaceIllegalCharacters,StandardMovieFormat,MovieFolderFormat,ColonReplacementFormat) values (0,1,1,'{Movie Title} {Release Year} {Quality Title}','{Movie Title} ({Release Year})',1)"
  sed -i -e "s/<LaunchBrowser>True<\/LaunchBrowser>/<LaunchBrowser>False<\/LaunchBrowser>/" $CONFIG_DIR/radarr/config.xml
  sed -i -e "s/<\/Config>/<AnalyticsEnabled>False<\/AnalyticsEnabled>\n<\/Config>/" $CONFIG_DIR/radarr/config.xml
}

configure_plexstats()
{
  echo
  echo
  echo "**************************"
  echo "* CONFIGURING PLEX STATS *"
  echo "**************************"
  echo

  local configFile=$CONFIG_DIR/plexstats/config.ini
  if [[ -f $configFile ]]; then
    echo "Plex Stats already configured; skipping..."
    return
  fi

  docker-compose up -d plexstats >> $LOG_FILE
  check_if_running 'http://localhost:8181' 200 'Tautulli - Welcome' 500
  docker-compose stop plexstats

  sed -i -e "s/^\(pms_url\) =.\+$/\1 = http:\/\/plex:32400/g" $configFile
  sed -i -e "s/^\(pms_name\) =.\+$/\1 = ${PLEX_HOSTNAME}/g" $configFile
  sed -i -e "s/^\(pms_plexpass\) =.\+$/\1 = 1/g" $configFile
  sed -i -e "s/^\(pms_port\) =.\+$/\1 = 32400/g" $configFile
  sed -i -e "s/^\(pms_platform\) =.\+$/\1 = Linux/g" $configFile
  sed -i -e "s/^\(pms_ip\) =.\+$/\1 = plex/g" $configFile
  sed -i -e "s/^\(launch_browser\) =.\+$/\1 = 0/g" $configFile
  sed -i -e "s/^\(show_advanced_settings\) =.\+$/\1 = 1/g" $configFile
  sed -i -e "s/^\(pms_logs_folder\) =.\+$/\1 = \/logs/g" $configFile
}

configure_deluge()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING DELUGE   *"
  echo "**************************"
  echo

  if [[ -f ${CONFIG_DIR}/deluge/core.conf && -f  ${CONFIG_DIR}/deluge-web/web.conf ]]; then
    echo "Deluge already configured; skipping..."
    return
  fi

  docker-compose up -d deluge
  check_if_running 'http://localhost:8112' 200 'Deluge'
  while [[ ! -f ${CONFIG_DIR}/deluge/auth ]]; do
    sleep 1s
  done
  docker-compose stop deluge

  echo ${VPN_USERNAME} > ${CONFIG_DIR}/openvpn/auth.txt
  echo ${VPN_PASSWORD} >> ${CONFIG_DIR}/openvpn/auth.txt
  echo "::10" > ${CONFIG_DIR}/deluge/auth

  sed -i -e "s/^\(.\+\"pwd_sha1\": \"\)[a-f0-9]\{40\}\(.\+\)$/\\1\\2/g" ${CONFIG_DIR}/deluge-web/web.conf
  sed -i -e "s/^\(.\+\"pwd_salt\": \"\)[a-f0-9]\{40\}\(.\+\)$/\\1\\2/g" ${CONFIG_DIR}/deluge-web/web.conf
}

build_and_configure()
{
  echo
  echo
  echo "**************************"
  echo "*    BUILDING IMAGES     *"
  echo "**************************"
  echo

  docker-compose build --no-cache >> $LOG_FILE
  if [[ "$?" -gt 0 ]]; then
    echo "Error building images check log file ${LOG_FILE} for details"
    exit $?
  fi

  configure_plex
  configure_nzbget
  configure_lidarr
  configure_sonarr
  configure_radarr
  configure_ombi
  configure_plexstats
  configure_deluge
}

install

echo
echo "You may need to perform some extra setup steps in each application"
echo
echo "NZBGet:     http://newz.${DOMAIN}"
echo "Plex:       http://watch.${DOMAIN}"
echo "Plex Stats: http://stats.${DOMAIN}"
echo "Lidarr:     http://music.${DOMAIN}"
echo "Sonarr:     http://shows.${DOMAIN}"
echo "Radarr:     http://movies.${DOMAIN}"
echo "OMBI:       http://request.${DOMAIN}"
echo "Deluge:     http://torrents.${DOMAIN}"
echo "Portal:     http://portal.${DOMAIN}"
echo
echo

exit $?

__ARCHIVE__
