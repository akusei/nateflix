#!/usr/bin/env bash

# TODO: might need to check for /dev/dri and remove it from compose if not found
# TODO: Test permissions and integration
# TODO: provide an "undo" to rollback changes on error


set -o errexit
set -o nounset
set -o pipefail


readonly LOG_FILE=/tmp/nateflix-$(date +%Y%m%d%H%M%S).log
declare -A SERVICE_NAMES

# Display name:hostname:1=login required
SERVICE_NAMES["portal"]="Portal:portal:1"
SERVICE_NAMES["nzbget"]="NZBGet:newz:1"
SERVICE_NAMES["deluge"]="Deluge:torrents:1"
SERVICE_NAMES["plex"]="Plex:watch:0"
SERVICE_NAMES["plexstats"]="Plex Stats:stats:1"
SERVICE_NAMES["ombi"]="OMBI:request:0"
SERVICE_NAMES["pihole"]="PiHole:pihole:1"
SERVICE_NAMES["jackett"]="Jackett:jackett:1"
SERVICE_NAMES["sonarr"]="Sonarr:shows:1"
SERVICE_NAMES["radarr"]="Radarr:movies:1"
SERVICE_NAMES["lidarr"]="Lidarr:music:1"
SERVICE_NAMES["hydra"]="Hydra:hydra:1"


check_installed()
{
  if hash nateflix 2>/dev/null; then
    echo "Nateflix is already installed. Please remove existing installation before continuing"
    echo "To remove nateflix run the command \"nateflix remove\""
    exit 1
  fi
}

check_ports()
{
  declare bind_ip="${1:-}"

  if [[ -z ${bind_ip} ]]; then
    bind_ip=$(ip route get 8.8.8.8 | awk '{for(i=1;i<=NF;i++) if ($i=="src") print $(i+1)}')
  fi

  #38258
  local ports="53 67 80 443 32400 3005 8324 32469 1900 32410 32412 32413 32414"
  local used=''
  local openPorts=$(lsof -Pi -n | grep -Pv "\-\>" | grep -P "${bind_ip}|\*:" | grep -v "COMMAND")

  for port in $ports; do
    local result=$(grep ":${port} " <<< "${openPorts}" | tail -n 1)
    if [[ ! -z $result ]]; then
      used="${used},$(echo ${result}|cut -d ' ' -f 1):${port}"
    fi
  done

  if [[ -n ${used} ]]; then
    used=$(echo $used | cut -d ',' -f 2-)
    echo "Required ports are already in use (${used})"
    echo "These ports are required, please stop any services associated with these ports"
    exit 1
  fi
}

log()
{
  declare level="$1" message="$2" stdout="${3:-}"

  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  echo "${timestamp} [${level}] ${message}" >> "${LOG_FILE}"
  if [[ ${stdout} == 1 ]]; then
    echo "${message}"
  fi
}

get_var()
{
  declare var_name="$1" config_file="$2"

  source "${config_file}"
  echo "${!var_name}"
}

set_json()
{
  declare filename="$1" path="$2" value="${3:-}"

  jq "if has(\"${path}\") then .${path} = ${value} else . end" "${filename}" > "${WORKING_DIR}/jq.tmp"
  mv "${WORKING_DIR}/jq.tmp" "${filename}"
}

version_compare()
{
  declare first="$1" second="$2"

  # return 0 $1 == $2
  # return 1 $1 > $2
  # return 2 $1 < $2

  if [[ ${first} == ${second} ]]; then
    return 0
  fi

  local IFS=.
  local i ver1=($first) ver2=($second)

  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
    ver1[i]=0
  done

  for ((i=0; i<${#ver1[@]}; i++)); do
    if [[ -z ${ver2[i]} ]]; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi

    if ((10#${ver1[i]} > 10#${ver2[i]})); then
      return 1
    fi

    if ((10#${ver1[i]} < 10#${ver2[i]})); then
      return 2
    fi
  done

  return 0
}

check_distro()
{
  export DISTRO=$(get_var ID /etc/os-release)
  export VERSION=$(get_var VERSION_ID /etc/os-release)

  if [[ -z $DISTRO ]]; then
    echo "Unable to determine linux distro"
    exit 1
  fi

  if [[ $(uname -m) != "x86_64" ]]; then
  	echo "This architecture is not supported ($(uname -m))"
  	exit 1
  fi

  local debVersion="7.7"
  local ubuVersion="14.04"
  local cenVersion="7"
  local fedVersion="26"

  if [[ "$DISTRO" == "debian" && $(version_compare $VERSION "${debVersion}"; echo $?) == 2 ]]; then
    echo "Requires Debian ${debVersion} or higher"
    exit 1
  elif [[ "$DISTRO" == "ubuntu" && $(version_compare $VERSION "${ubuVersion}"; echo $?) == 2 ]]; then
    echo "Requires Ubuntu ${ubuVersion} or higher"
    exit 1
  elif [[ "$DISTRO" == "centos" && $(version_compare $VERSION "${cenVersion}"; echo $?) == 2 ]]; then
    echo "Requires CentOS ${cenVersion} or higher"
    exit 1
  elif [[ "$DISTRO" == "fedora" && $(version_compare $VERSION "${fedVersion}"; echo $?) == 2 ]]; then
    echo "Requires Fedora ${fedVersion} or higher"
    exit 1
  fi

  export PACKAGE_UPDATE="apt-get -qq update"
  export PACKAGE_INSTALL="apt-get -qq -y install"

  if [[ ${DISTRO} == "centos" ]]; then
    PACKAGE_UPDATE=""
    PACKAGE_INSTALL="yum install -y"
  elif [[ ${DISTRO} == "fedora" ]]; then
    PACKAGE_UPDATE=""
    PACKAGE_INSTALL="dnf -y install"
  fi
}

cleanup()
{
  declare work_dir="$1"

  if [[ -d ${work_dir} ]]; then
    rm -rf "${work_dir}"
  fi
}

wait_for_service()
{
  declare service="$1" url_path="$2" status="$3" content="$4" retries="${5:-20}"

  echo "Waiting for service to become available..."
  local hostname=$(echo ${SERVICE_NAMES["${service}"]} | cut -d ':' -f 2)
  local url="https://${hostname}.${DOMAIN}${url_path}"
  local http_status="0"
  local http_content=""
  local out=""
  local use_password=$(echo ${SERVICE_NAMES["${service}"]} | cut -d ':' -f 3)

  while [[ ${http_status} != ${status} || ! ${http_content} =~ ${content} ]]; do
    if [[ ${use_password} == "1" ]]; then
      out=$(curl -k --silent -L -w "\n%{http_code}" \
            --netrc-file <(cat <<<"machine ${hostname}.${DOMAIN} login ${PORTAL_USERNAME} password ${PORTAL_PASSWORD}") \
            "${url}" || true)
    else
      out=$(curl -k --silent -L -w "\n%{http_code}" "${url}" || true)
    fi
    http_status="${out##*$'\n'}"
    http_content="${out%$'\n'*}"
    retries=$((${retries}-1))
    if [[ ${retries} < 0 ]]; then
      echo "Service did not properly start"
      exit 1
    fi
    sleep 1
  done

  return 0
}

extract()
{
  declare self="$0" dest="$1"

  local archive=$(awk '/^__ARCHIVE__/ {print NR + 1; exit 0; }' "${self}")
  tail -n+${archive} "${self}" | tar xpJv -C "${dest}" >> "${LOG_FILE}" 2>&1
}

get_value()
{
    declare question="$1" default="$2"

    read -ep "${question} [${default}]? " value
    if [[ -n ${value} ]]; then
      echo "${value}"
    else
      echo "${default}"
    fi
}

check_prereqs()
{
  local reqDockerVersion="18.06.0"
  local reqDCVersion="1.23.1"

  if ! hash docker 2>/dev/null; then
    echo "docker is not installed"
    echo "please install the latest version of docker"
    echo "https://docs.docker.com/install/linux/docker-ce/${DISTRO}/"
    exit 1
  fi

  if ! hash docker-compose 2>/dev/null; then
    echo "docker-compose is not installed"
    echo "please install the latest version of docker compose"
    echo "https://docs.docker.com/compose/install/"
    exit 1
  fi

  local dockerVersion=$(docker --version|cut -d ' ' -f 3|cut -d ',' -f 1)
  local dcVersion=$(docker-compose --version|cut -d ' ' -f 3|cut -d ',' -f 1)
  if [[ $(version_compare "${dockerVersion}" "${reqDockerVersion}"; echo $?) == 2 ]]; then
    echo "Your docker version (${dockerVersion}) is not supported"
    echo "Version >= ${reqDockerVersion} is required"
    echo "Please update your docker https://docs.docker.com/install/linux/docker-ce/${DISTRO}/"
    exit 1
  fi

  if [[ $(version_compare "${dcVersion}" "${reqDCVersion}"; echo $?) == 2 ]]; then
    echo "Your docker-compose version (${dcVersion}) is not supported"
    echo "Version >= ${reqDCVersion} is required"
    echo "Please update your docker-compose https://docs.docker.com/compose/install/"
    exit 1
  fi

  systemctl start docker
}

install_dependencies()
{
  echo "Installing dependencies..."
  ${PACKAGE_UPDATE}
  ${PACKAGE_INSTALL} rsync sqlite3 curl openssl jq tzdata >> "${LOG_FILE}" 2>&1
}

get_plex_token()
{
  declare username="$1" password="$2"

  local result=$(curl -s --header "X-Plex-Client-Identifier: Nateflix" \
          --header "X-Plex-Product: Nateflix Installation" \
          --header "X-Plex-Version: V1" \
          -d "user[login]=${username}&user[password]=${password}" \
          -X POST https://plex.tv/users/sign_in.json)
  local re="^\{\"error\":\"(.+)\"\}$"
  if [[ $result =~ $re ]]; then
    log "ERROR" "Login failed: ${BASH_REMATCH[1]}" 1
    echo ""
    return 1
  elif [[ $result != *"{\"user\":"* ]]; then
    echo $result >> "${LOG_FILE}"
    log "ERROR" "Login failed: Unexpected result, try again (check ${LOG_FILE} for details)" 1
  else
    token=$(echo $result | grep -ioe '"authToken":"[^"]*' | cut -c 14-)
    if [[ -z ${token} ]]; then
      echo "Unable to parse plex login token"
      exit 1
    fi
  fi

  echo ${token}
  return 0
}

gather_required_config()
{
  echo
  echo
  echo "**************************"
  echo "* INITIAL CONFIGURATION  *"
  echo "**************************"
  echo

  if [[ -z ${CONFIG_DIR:-} ]]; then
    export CONFIG_DIR=/nateflix
  fi

  if [[ -z ${PLEX_USERNAME:-} && -z ${PLEX_PASSWORD:-} && -z ${PLEX_TOKEN:-} ]]; then
    log "INFO" "Gathering credentials..."
    while [[ -z ${PLEX_USERNAME:-} || -z ${PLEX_PASSWORD:-} && -z ${PLEX_TOKEN:-} ]]; do
      read -ep "Plex username: " PLEX_USERNAME
      read -esp "Plex password: " PLEX_PASSWORD
      echo
      if [[ -z ${PLEX_USERNAME} || -z ${PLEX_PASSWORD} ]]; then
        echo "Plex username and password required"
      elif [[ -n ${PLEX_USERNAME} && -n ${PLEX_PASSWORD} ]]; then
        PLEX_TOKEN=$(get_plex_token "${PLEX_USERNAME}" "${PLEX_PASSWORD}")
      fi
    done
  else
    echo "PLEX_CREDENTIALS:   ${PLEX_USERNAME}:********"
    PLEX_TOKEN=$(get_plex_token "${PLEX_USERNAME}" "${PLEX_PASSWORD}")
  fi

  export PLEX_USERNAME
  export PLEX_PASSWORD
  export PLEX_TOKEN

  if [[ -z ${PORTAL_USERNAME:-} && -z ${PORTAL_PASSWORD:-} ]]; then
    echo
    echo "Set credentials for web access to system portal"
    while [[ -z ${PORTAL_USERNAME:-} || ${PORTAL_PASSWORD:-"1"} != ${PORTAL_CONFIRM_PASSWORD:-"2"} ]]; do
      read -ep "Portal Username: " PORTAL_USERNAME
      read -esp "Plex password: " PORTAL_PASSWORD
      echo
      read -esp "Confirm password: " PORTAL_CONFIRM_PASSWORD
      echo

      if [[ -z ${PORTAL_USERNAME} || -z ${PORTAL_PASSWORD} ]]; then
        echo "Portal username and password are required"
      elif [[ ${PORTAL_PASSWORD} != ${PORTAL_CONFIRM_PASSWORD} ]]; then
        echo "Passwords do not match"
      fi
    done
  else
    echo "PORTAL_CREDENTIALS: ${PORTAL_USERNAME}:********"
  fi

  export PORTAL_PASSWORD
  export PORTAL_CREDS="${PORTAL_USERNAME}:$(echo ${PORTAL_PASSWORD}|openssl passwd -stdin -apr1 -quiet 2>/dev/null || true)"

  if [[ -z ${VPN_USERNAME:-} && -z ${VPN_PASSWORD:-} ]]; then
    echo
    echo "Set credentials for Private Internet Access VPN"
    while [[ -z ${VPN_USERNAME:-} || -z ${VPN_PASSWORD:-} ]]; do
      read -ep "PIA VPN Username: " VPN_USERNAME
      read -esp "PIA VPN Password: " VPN_PASSWORD
      echo
      if [[ -z ${VPN_USERNAME} || -z ${VPN_PASSWORD} ]]; then
        echo "VPN username and password are required"
      fi
    done
  else
    echo "VPN_CREDENTIALS:    ${VPN_USERNAME}:********"
  fi

  export VPN_USERNAME
  export VPN_PASSWORD
  export VPN_REGION="US West"

  echo

  if [[ -z ${ADVERTISE_IP:-} ]]; then
    local ip=$(ip route get 8.8.8.8 | awk '{for(i=1;i<=NF;i++) if ($i=="src") print $(i+1)}')
    export ADVERTISE_IP=$(get_value "Advertise IP" "${ip}")
  else
    echo "ADVERTISE_IP: ${ADVERTISE_IP}"
  fi

  check_ports "${ADVERTISE_IP}"

  if [[ -z ${DOMAIN:-} ]]; then
    export DOMAIN=$(get_value "Nateflix domain name (FQDN if you have one)" "$(hostname).local")
  else
    echo "DOMAIN:       ${DOMAIN}"
  fi

  if [[ -z ${INSTALL_DIR:-} ]]; then
    export INSTALL_DIR=$(get_value "Install directory" "/opt/nateflix")
  else
    echo "INSTALL_DIR:  ${INSTALL_DIR}"
  fi

  if [[ -z ${MEDIA_ROOT:-} ]]; then
    export MEDIA_ROOT=$(get_value "Root location of media library" "/mnt/media")
  else
    echo "MEDIA_ROOT:   ${MEDIA_ROOT}"
  fi
}

install()
{
  echo
  echo
  echo "**************************"
  echo "*  INSTALLING NATEFLIX   *"
  echo "**************************"
  echo

  log "INFO" "Extracting files" 1
  extract "${WORKING_DIR}"

  log "INFO" "Creating nateflix user" 1
  useradd -M -r -s /bin/false nateflix || true
  usermod -a -G docker nateflix || true

  if [[ ! -f /usr/local/bin/ctop ]]; then
    log "INFO" "Installing ctop" 1
    local version=$(curl --silent "https://api.github.com/repos/bcicen/ctop/releases/latest" | grep -ioe '"tag_name": "[^"]*' | cut -c 14-)
    curl --silent -o /usr/local/bin/ctop -L "https://github.com/bcicen/ctop/releases/download/${version}/ctop-0.7.1-linux-amd64"
    chmod a+x /usr/local/bin/ctop
  fi

  export NATEFLIX_UID=$(getent passwd nateflix | cut -d ':' -f 3)
  export NATEFLIX_GID=$(getent group nateflix | cut -d ':' -f 3)
  export DOCKER_GID=$(getent group docker | cut -d ':' -f 3)

  log "INFO" "Creating directories" 1
  mkdir -p "${INSTALL_DIR}"
  mkdir -p "${CONFIG_DIR}"
  mkdir -p "${MEDIA_ROOT}"

  local configFile=.env

  log "INFO" "Copying files" 1
  cp -Rv "${WORKING_DIR}/." "${INSTALL_DIR}" >> "${LOG_FILE}" 2>&1
  touch "${INSTALL_DIR}/${configFile}"

  if [[ -e /usr/local/sbin/nateflix ]]; then
    rm /usr/local/sbin/nateflix
  fi
  ln -s "${INSTALL_DIR}/bin/nateflix" "/usr/local/sbin/nateflix"

  cd "${INSTALL_DIR}"

  echo "Setting CONFIG_DIR to ${CONFIG_DIR}" >> "${LOG_FILE}"
  echo CONFIG_DIR=${CONFIG_DIR} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting MEDIA_ROOT to ${MEDIA_ROOT}" >> "${LOG_FILE}"
  echo MEDIA_ROOT=${MEDIA_ROOT} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting INSTALL_DIR to ${INSTALL_DIR}" >> "${LOG_FILE}"
  echo INSTALL_DIR=${INSTALL_DIR} >> "${INSTALL_DIR}/${configFile}"

  echo "Setting DOMAIN to ${DOMAIN}" >> "${LOG_FILE}"
  echo DOMAIN=${DOMAIN} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting ADVERTISE_IP to ${ADVERTISE_IP}" >> "${LOG_FILE}"
  echo ADVERTISE_IP=${ADVERTISE_IP} >> "${INSTALL_DIR}/${configFile}"

  echo "Setting NATEFLIX_UID to ${NATEFLIX_UID}" >> "${LOG_FILE}"
  echo NATEFLIX_UID=${NATEFLIX_UID} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting NATEFLIX_GID to ${NATEFLIX_GID}" >> "${LOG_FILE}"
  echo NATEFLIX_GID=${NATEFLIX_GID} >> "${INSTALL_DIR}/${configFile}"
  echo "Setting DOCKER_GID to ${DOCKER_GID}" >> "${LOG_FILE}"
  echo DOCKER_GID=${DOCKER_GID} >> "${INSTALL_DIR}/${configFile}"

  mkdir -p "${CONFIG_DIR}/vpn"
  local vpnConfig="${CONFIG_DIR}/vpn/vpn.env"

  echo "Setting VPN_REGION to ${VPN_REGION}" >> "${LOG_FILE}"
  echo REGION=${VPN_REGION} > "${vpnConfig}"
  echo "Setting VPN_USERNAME to ${VPN_USERNAME}" >> "${LOG_FILE}"
  echo USER=${VPN_USERNAME} >> "${vpnConfig}"
  echo "Setting VPN_PASSWORD to ${VPN_PASSWORD}" >> "${LOG_FILE}"
  echo PASSWORD=${VPN_PASSWORD} >> "${vpnConfig}"
  echo ENCRYPTION=strong >> "${vpnConfig}"
  echo PROTOCOL=udp >> "${vpnConfig}"

  mkdir -p "${CONFIG_DIR}/pihole"
  local phConfig="${CONFIG_DIR}/pihole/pihole.env"

  echo WEBPASSWORD=> "${phConfig}"
  echo DNS1=8.8.8.8 >> "${phConfig}"
  echo DNS2=8.8.4.4 >> "${phConfig}"
  echo ServerIP=${ADVERTISE_IP} >> "${phConfig}"

  chown -R nateflix:nateflix "${INSTALL_DIR}"
  chown -R nateflix:nateflix "${CONFIG_DIR}"
}

docker_stop()
{
  declare service="$1"
  docker-compose stop "${service}"
}

docker_start()
{
  declare service="$1" url="$2" status="$3" \
          content="$4" retries="${5:-20}" dont_stop="${6:-0}"

  docker-compose up -d "${service}"
  wait_for_service "${service}" "${url}" ${status} "${content}" ${retries}

  if [[ ${dont_stop} == 0 ]]; then
    docker_stop "${service}"
  fi
}

configure_lidarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING LIDARR   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Lidarr"
  docker_start "lidarr" "" 200 "Lidarr" 30

  local dbFile="${CONFIG_DIR}/lidarr/lidarr.db"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('autounmonitorpreviouslydownloadedtracks', 'True')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('deleteemptyfolders', 'True')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('copyusinghardlinks', 'False')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1,'nzbget','Nzbget','{\"host\":\"nzbget\",\"port\":6789,\"username\":\"\",\"password\":\"\",\"musicCategory\":\"Music\",\"recentTvPriority\":0,\"olderTvPriority\":0,\"addPaused\":false,\"useSsl\":false}','NzbgetSettings')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1,'deluge','Deluge','{\"host\":\"deluge\",\"port\":8112,\"username\":\"\",\"password\":\"\",\"musicCategory\":\"lidarr\",\"recentTvPriority\":0,\"olderTvPriority\":0,\"addPaused\":false,\"useSsl\":false}','DelugeSettings')"
  # sqlite3 "${dbFile}" "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename,OnAlbumDownload) values ('plex',0,1,'{\"host\":\"plex\",\"port\":32400,\"username\":\"${PLEX_USERNAME}\",\"password\":\"${PLEX_PASSWORD}\",\"updateLibrary\":true,\"useSsl\":false,\"isValid\":true}','PlexServer','PlexServerSettings',1,'[]',1,1)"
  sqlite3 "${dbFile}" "insert into Notifications (Name,OnGrab,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename,OnReleaseImport,OnHealthIssue,IncludeHealthWarnings,OnDownloadFailure,OnImportFailure,OnTrackRetag) values ('plex',0,'{\"host\":\"plex\",\"port\":32400,\"authToken"":\"\",\"signIn\":\"startOAuth\",\"updateLibrary\":true,\"useSsl\":false,\"isValid\":true}','PlexServer','PlexServerSettings',1,'[]',1,1,0,0,0,0,1)"
}

configure_plex()
{
  echo
  echo
  echo "**************************"
  echo "*    CONFIGURING PLEX    *"
  echo "**************************"
  echo

  log "INFO" "Getting Plex claim token" 1
  local result=$(curl -s --header "X-Plex-Client-Identifier: Nateflix" \
          --header "X-Plex-Product: Nateflix Installation" \
          --header "X-Plex-Token: ${PLEX_TOKEN}" \
          -X GET https://plex.tv/api/claim/token.json)

  export PLEX_CLAIM=$(echo ${result} | grep -ioe '"token":"[^"]*' | cut -c 10-)
  if [[ -z ${PLEX_CLAIM} ]]; then
    echo "Error retrieving Plex Claim Token"
    echo ${result} >> "${LOG_FILE}"
    exit 1;
  fi
}

make_api_call()
{
  declare api_key="$1" url="$2" data="$3"

  # --netrc-file <(cat <<<"machine request.${DOMAIN} login ${PORTAL_USERNAME} password ${PORTAL_PASSWORD}") \
  curl -Ls -k -H 'Content-Type: application/json' \
       -H "ApiKey: ${api_key}" \
       -d "${data}" "https://request.${DOMAIN}/api/v1/${url}"
}

configure_ombi()
{
  echo
  echo
  echo "**************************"
  echo "*    CONFIGURING OMBI    *"
  echo "**************************"
  echo

  log "INFO" "Configuring OMBI"
  docker_start "ombi" "" 200 "Ombi" 20 1

  local apiKey=$(grep -aioe '"ApiKey":"[^"]*' "${CONFIG_DIR}/ombi/Ombi.db" | cut -c 11-)
  local sonarrKey=$(cat "${CONFIG_DIR}/sonarr/config.xml" | grep -aioe "<ApiKey>[^<]*" | cut -c 9-)
  local radarrKey=$(cat "${CONFIG_DIR}/radarr/config.xml" | grep -aioe "<ApiKey>[^<]*" | cut -c 9-)

  make_api_call "${apiKey}" "Issues/categories" '{"value":"Shows"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Foreign Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Anime Movies"}'
  make_api_call "${apiKey}" "Issues/categories" '{"value":"Anime Shows"}'

  make_api_call "${apiKey}" "Settings/customization" "{\"applicationName\":\"Nateflix\",\"applicationUrl\":\"https://request.${DOMAIN}\"}"
  make_api_call "${apiKey}" "Settings/Issues" '{"enabled":true,"enableInProgress":true}'
  make_api_call "${apiKey}" "Settings/authentication" '{"allowNoPassword":false,"enableOAuth":true}'

  local data=$(cat <<- EOD
  {
    "enabled": true,
    "apiKey": "${sonarrKey}",
    "qualityProfile": "6",
    "seasonFolders": true,
    "qualityProfileAnime": "6",
    "addOnly": false,
    "v3": false,
    "ssl": false,
    "ip": "sonarr",
    "port": 8989,
    "id": 0
  }
EOD
)
  make_api_call "${apiKey}" "Settings/sonarr" "${data}"

  data=$(cat <<- EOD
  {
    "id": 1,
    "enabled": true,
    "apiKey": "${radarrKey}",
    "defaultQualityProfile": "6",
    "addOnly": false,
    "minimumAvailability": "Released",
    "ssl": false,
    "ip": "radarr",
    "port": 7878
  }
EOD
)
  make_api_call "${apiKey}" "Settings/radarr" "${data}"

#   data=$(cat <<- EOD
#   {
#     "enable": true,
#     "installId": "string",
#     "servers": [
#       {
#         "name": "Nateflix",
#         "episodeBatchSize": 0,
#         "ssl": true,
#         "ip": "plex",
#         "port": 32400
#       }
#     ]
#   }
# EOD
# )

  data=$(cat <<- EOD
  {
    "enable": true,
    "installId": "48e1cc35-c5cf-4555-8326-27a922fdb749",
    "servers": [
      {
        "name": "Nateflix",
        "plexSelectedLibraries": [
          {
            "enabled": true
          }
        ],
        "ssl": true,
        "ip": "plex",
        "port": 32400
      }
    ],
    "id": 2
  }
EOD
)
  make_api_call "${apiKey}" "Settings/plex" "${data}"

  # {
  #   "servers": [
  #     {
  #       "name": "Server 1",
  #       "plexAuthToken": "<token>",
  #       "machineIdentifier": "",
  #       "episodeBatchSize": 0,
  #       "plexSelectedLibraries": [],
  #       "ssl": false,
  #       "subDir": null,
  #       "ip": "",
  #       "port": 0,
  #       "id": 987987987
  #     }
  #   ],
  # }

  #docker-compose stop ombi
  docker_stop "ombi"
}


configure_sonarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING SONARR   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Sonarr"
  docker_start "sonarr" "" 200 "Sonarr" 20

  local dbFile="${CONFIG_DIR}/sonarr/nzbdrone.db"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('cleanupmetadataimages', 'False')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'nzbget', 'Nzbget', '{\"host\": \"nzbget\", \"port\": 6789, \"username\": \"\", \"password\": \"\", \"tvCategory\": \"Series\", \"recentTvPriority\": 0, \"olderTvPriority\": 0, \"useSsl\": false}', 'NzbgetSettings')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'deluge', 'Deluge', '{\"host\": \"deluge\", \"port\": 8112, \"password\": \"\", \"tvCategory\": \"tv-sonarr\", \"recentTvPriority\": 0, \"addPaused\": false, \"olderTvPriority\": 0, \"useSsl\": false}', 'DelugeSettings')"
  sqlite3 "${dbFile}" "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename) values ('pms', 0, 1, '{\"host\": \"plex\", \"port\": 32400, \"username\": \"${PLEX_USERNAME}\", \"password\": \"${PLEX_PASSWORD}\", \"updateLibrary\": true, \"useSsl\": false, \"isValid\": true}', 'PlexServer', 'PlexServerSettings', 1, '[]', 1)"
  sqlite3 "${dbFile}" "insert into NamingConfig (MultiEpisodeStyle,RenameEpisodes,StandardEpisodeFormat,DailyEpisodeFormat,SeasonFolderFormat,SeriesFolderFormat,AnimeEpisodeFormat,ReplaceIllegalCharacters) values (0,1,'{Series Title} - S{season:00}E{episode:00} - {Episode Title} {Quality Full}','{Series Title} - {Air-Date} - {Episode Title} {Quality Full}','Season {season}','{Series Title}','{Series Title} - S{season:00}E{episode:00} - {Episode Title} {Quality Full}',1)"
}

configure_radarr()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING RADARR   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Radarr"
  docker_start "radarr" "" 200 "Radarr" 20

  local dbFile="${CONFIG_DIR}/radarr/nzbdrone.db"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('cleanupmetadataimages', 'False')"
  sqlite3 "${dbFile}" "insert into Config (Key,Value) values ('removecompleteddownloads', 'True')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'nzbget', 'Nzbget', '{\"host\": \"nzbget\", \"port\": 6789, \"username\": \"\", \"password\": \"\", \"tvCategory\": \"Series\", \"recentTvPriority\": 0, \"olderTvPriority\": 0, \"useSsl\": false}', 'NzbgetSettings')"
  sqlite3 "${dbFile}" "insert into DownloadClients (Enable,Name,Implementation,Settings,ConfigContract) values (1, 'deluge', 'Deluge', '{\"host\": \"deluge\", \"port\": 8112, \"password\": \"\", \"tvCategory\": \"radarr\", \"recentTvPriority\": 0, \"addPaused\": false, \"olderTvPriority\": 0, \"useSsl\": false}', 'DelugeSettings')"
  sqlite3 "${dbFile}" "insert into Notifications (Name,OnGrab,OnDownload,Settings,Implementation,ConfigContract,OnUpgrade,Tags,OnRename) values ('pms', 0, 1, '{\"host\": \"plex\", \"port\": 32400, \"username\": \"${PLEX_USERNAME}\", \"password\": \"${PLEX_PASSWORD}\", \"updateLibrary\": true, \"useSsl\": false, \"isValid\": true}', 'PlexServer', 'PlexServerSettings', 1, '[]', 1)"
  sqlite3 "${dbFile}" "insert into NamingConfig (MultiEpisodeStyle,RenameEpisodes,ReplaceIllegalCharacters,StandardMovieFormat,MovieFolderFormat,ColonReplacementFormat) values (0,1,1,'{Movie Title} {Release Year} {Quality Title}','{Movie Title} ({Release Year})',1)"
}

configure_deluge()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING DELUGE   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Deluge"

  # echo ${VPN_USERNAME} > "${CONFIG_DIR}/vpn/auth.conf"
  # echo ${VPN_PASSWORD} >> "${CONFIG_DIR}/vpn/auth.conf"
  # chown -R nateflix:nateflix "${CONFIG_DIR}/vpn"

  docker_start "deluge" "" 200 "Deluge" 20 1
  while [[ ! -f "${CONFIG_DIR}/deluge/auth" ]]; do
    sleep 1s
  done
  docker_stop "deluge"

  # for some reason, this MUST be the last line in the file
  echo "::10" >> "${CONFIG_DIR}/deluge/auth"
  chown nateflix:nateflix "${CONFIG_DIR}/deluge/auth"

  cp "${INSTALL_DIR}/deluge/label.conf" "${CONFIG_DIR}/deluge/label.conf"
  chown nateflix:nateflix "${CONFIG_DIR}/deluge/label.conf"
  rm -rf "${INSTALL_DIR}/deluge" > /dev/null

  # this will set the password to blank
  set_json "${CONFIG_DIR}/deluge/web.conf" "first_login" "false"
  set_json "${CONFIG_DIR}/deluge/web.conf" "pwd_sha1" '"bc564fecb4c2b1b9380995b28ef2e85298bbfbd1"'
  set_json "${CONFIG_DIR}/deluge/web.conf" "pwd_salt" '"b8db8b895fccd7f9aa156fe82ff35744f3f60224"'
  # sed -i -e "s/^\(.\+\"first_login\": \)true\(.\+\)$/\\1false\\2/g" "${CONFIG_DIR}/deluge/web.conf"
  # sed -i -e "s/^\(.\+\"pwd_sha1\": \"\)[a-f0-9]\{40\}\(.\+\)$/\\1bc564fecb4c2b1b9380995b28ef2e85298bbfbd1\\2/g" "${CONFIG_DIR}/deluge/web.conf"
  # sed -i -e "s/^\(.\+\"pwd_salt\": \"\)[a-f0-9]\{40\}\(.\+\)$/\\1b8db8b895fccd7f9aa156fe82ff35744f3f60224\\2/g" "${CONFIG_DIR}/deluge/web.conf"

  set_json "${CONFIG_DIR}/deluge/core.conf" "enabled_plugins" '["Label"]'
  set_json "${CONFIG_DIR}/deluge/core.conf" "stop_seed_at_ratio" "true"
  set_json "${CONFIG_DIR}/deluge/core.conf" "stop_seed_ratio" "0.0"
  set_json "${CONFIG_DIR}/deluge/core.conf" "seed_time_ratio_limit" "0.0"
  set_json "${CONFIG_DIR}/deluge/core.conf" "seed_time_limit" "0"
  set_json "${CONFIG_DIR}/deluge/core.conf" "share_ratio_limit" "0.0"
  set_json "${CONFIG_DIR}/deluge/core.conf" "move_completed_path" '"/downloads"'
  set_json "${CONFIG_DIR}/deluge/core.conf" "torrentfiles_location" '"/downloads"'
  set_json "${CONFIG_DIR}/deluge/core.conf" "download_location" '"/downloads"'
  set_json "${CONFIG_DIR}/deluge/core.conf" "autoadd_location" '"/blackhole"'
  set_json "${CONFIG_DIR}/deluge/core.conf" "autoadd_enable" "true"
}

configure_portal()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING PORTAL   *"
  echo "**************************"
  echo

  echo "Copying configuration..."
  cp "${INSTALL_DIR}/portal/config.toml" "${CONFIG_DIR}/portal"
  echo "Creating users..."
  echo ${PORTAL_CREDS} > "${CONFIG_DIR}/portal/users"

  chown nateflix:nateflix "${CONFIG_DIR}/portal/config.toml"
  chown nateflix:nateflix "${CONFIG_DIR}/portal/users"
}

configure_pihole()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING PIHOLE   *"
  echo "**************************"
  echo

  log "INFO" "Configuring PiHole"
  echo "Configuring ${DOMAIN} DNS entries"
  echo "address=/${DOMAIN}/${ADVERTISE_IP}" > "${CONFIG_DIR}/pihole/dnsmasq/02-local.conf"
  chown -R nateflix:nateflix "${CONFIG_DIR}/pihole/dnsmasq/02-local.conf"
}

configure_jackett()
{
  echo
  echo
  echo "**************************"
  echo "*  CONFIGURING JACKETT   *"
  echo "**************************"
  echo

  log "INFO" "Configuring Jackett"

  docker_start "jackett" "/UI/Dashboard" 200 "Jackett" 50

  local config_file="${CONFIG_DIR}/jackett/Jackett/ServerConfig.json"
  set_json "${config_file}" "AllowExternal" "true"
  set_json "${config_file}" "Port" "9117"
  set_json "${config_file}" "BlackholeDir" "/torrents"
  set_json "${config_file}" "UpdateDisabled" "true"
  set_json "${config_file}" "UpdatePrerelease" "false"

  # sed -i -e 's/\(^.*"AllowExternal": \).*[^,]\(,\)\{0,1\}$/\1true\2/g' \
  #     -e 's/\(^.*"Port": \).*[^,]\(,\)\{0,1\}$/\19117\2/g' \
  #     -e 's/\(^.*"BlackholeDir": \).*[^,]\(,\)\{0,1\}$/\1"\/torrents"\2/g' \
  #     -e 's/\(^.*"UpdateDisabled": \).*[^,]\(,\)\{0,1\}$/\1true\2/g' \
  #     -e 's/\(^.*"UpdatePrerelease": \).*[^,]\(,\)\{0,1\}$/\1false\2/g' "${config_file}"
}

configure_nzbget()
{
  echo
  echo
  echo "**************************"
  echo "*   CONFIGURING NZBGET   *"
  echo "**************************"
  echo

  log "INFO" "Configuring NZBGet"

  local config_file="${CONFIG_DIR}/nzbget/nzbget.conf"
  docker-compose up -d nzbget
  while [[ ! -f ${config_file} ]]; do
    sleep 1s
  done
  docker stop nzbget

  sed -i -e "s#\(ScriptDir=\).*#\1/config/scripts#g" \
      -e "s#\(LockFile=\).*#\1/tmp/nzbget.lock#g" \
      -e "s#\(LogFile=\).*#\1/config/nzbget.log#g" \
      -e "s#\(DupeCheck=\).*#\1no#g" \
      -e "s#\(HealthCheck=\).*#\1delete#g" \
      -e "s#\(NzbCleanupDisk=\).*#\1yes#g" \
      -e "s#\(CrashDump=\).*#\1no#g" \
      -e "s#\(ControlUsername=\).*#\1#g" \
      -e "s#\(ControlPassword=\).*#\1#g" \
      -e "s#\(ParCleanupQueue=\).*#\1yes#g" "${config_file}"
}

create_directories()
{
  echo
  echo
  echo "**************************"
  echo "*  CREATING DIRECTORIES  *"
  echo "**************************"
  echo

  log "INFO" "Creating Plex directories..." 1
  mkdir -p "${CONFIG_DIR}/plex"

  log "INFO" "Creating Deluge directories..." 1
  mkdir -p "${CONFIG_DIR}/deluge"
  mkdir -p "${CONFIG_DIR}/downloads/deluge"
  mkdir -p "${CONFIG_DIR}/vpn"

  log "INFO" "Creating Jackett directories..." 1
  mkdir -p "${CONFIG_DIR}/Jackett"
  mkdir -p "${CONFIG_DIR}/torrents"

  log "INFO" "Creating Portal directories..." 1
  mkdir -p "${CONFIG_DIR}/portal"

  log "INFO" "Creating PiHole directories..." 1
  mkdir -p "${CONFIG_DIR}/pihole/dnsmasq"
  mkdir -p "${CONFIG_DIR}/pihole/config"

  log "INFO" "Creating NZBGet directories..." 1
  mkdir -p "${CONFIG_DIR}/nzbget"
  mkdir -p "${CONFIG_DIR}/nzbget/scripts"
  mkdir -p "${CONFIG_DIR}/downloads/nzbget"

  log "INFO" "Creating Lidarr directories..." 1
  mkdir -p "${CONFIG_DIR}/lidarr"

  log "INFO" "Creating Sonarr directories..." 1
  mkdir -p "${CONFIG_DIR}/sonarr"

  log "INFO" "Creating Radarr directories..." 1
  mkdir -p "${CONFIG_DIR}/radarr"

  log "INFO" "Creating OMBI directories..." 1
  mkdir -p "${CONFIG_DIR}/ombi"

  log "INFO" "Creating Plex Stats directories..." 1
  mkdir -p "${CONFIG_DIR}/plexstats"

  log "INFO" "Changing ownership of config directory" 1
  chown -R nateflix:nateflix "${CONFIG_DIR}"
}

build_and_configure()
{
  echo
  echo
  echo "**************************"
  echo "*    BUILDING IMAGES     *"
  echo "**************************"
  echo

  export PLEX_CLAIM=""
  # docker-compose build --no-cache deluge >> "${LOG_FILE}"
  # if [[ $? > 0 ]]; then
  #   echo "Error building images check log file ${LOG_FILE} for details"
  #   exit $?
  # fi

  create_directories

  configure_portal
  configure_pihole
  configure_nzbget
  configure_deluge
  configure_lidarr
  configure_jackett
  configure_sonarr
  configure_radarr
  configure_ombi
  configure_plex

  docker-compose up -d
}

show_complete()
{
  echo
  echo
  echo "Installation complete"
  echo
  echo "You may need to perform some extra setup steps in each application"
  echo "The following domains might also need to be added to your hosts file"
  echo "You can also point your DNS to this server and your domain will resolve"
  echo
  echo "NOTE: For now, links generated in jackett will need to be changed manually"
  echo "to 'http' instead of 'https' and port 8080 will need to be added"
  echo

  local content=""
  for service in "${SERVICE_NAMES[@]}"; do
    local display_name=$(echo "${service}" | cut -d ':' -f 1)
    local hostname=$(echo "${service}" | cut -d ':' -f 2)
    content="${content}${display_name},https://${hostname}.${DOMAIN}|"
  done

  echo "${content//|/$'\n'}" | column -s ',' -t
  echo
}

if [[ ${EUID} != 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

WORKING_DIR=$(mktemp -d)
trap "cleanup \"${WORKING_DIR}\"" EXIT


# Check for required packages, distros and ports, exit if missing requirements
check_installed
check_distro
check_prereqs
check_ports

# Install smaller dependencies
install_dependencies

# Gather information from user and perform install
gather_required_config
install

# Build images and configure programs
build_and_configure

show_complete

exit $?

__ARCHIVE__
